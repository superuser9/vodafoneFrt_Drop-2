package com.vodafone.frt.activities;

import android.Manifest;
import android.app.ProgressDialog;
import android.content.BroadcastReceiver;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.pm.PackageManager;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.net.ConnectivityManager;
import android.os.Build;
import android.os.Bundle;
import android.support.annotation.RequiresApi;
import android.support.v4.app.ActivityCompat;
import android.support.v7.app.AppCompatActivity;
import android.text.TextUtils;
import android.view.View;
import android.widget.LinearLayout;
import android.widget.ListView;

import com.vodafone.frt.R;
import com.vodafone.frt.adapters.FRTRaiseIssueAdapter;
import com.vodafone.frt.apis.FRTAsyncCommon;
import com.vodafone.frt.apis.FRTWEBAPI;
import com.vodafone.frt.app.FRTApp;
import com.vodafone.frt.callbacks.FRTCallBackForIdFind;
import com.vodafone.frt.callbacks.FRTCallBackInitViews;
import com.vodafone.frt.callbacks.FRTCallBackSetListeners;
import com.vodafone.frt.enums.FRTAPIType;
import com.vodafone.frt.fonts.FRTButtonTrebuchetMS;
import com.vodafone.frt.fonts.FRTEditTextTrebuchetMS;
import com.vodafone.frt.fonts.FRTTextviewTrebuchetMS;
import com.vodafone.frt.models.FRTRequestPauseReasonModel;
import com.vodafone.frt.models.FRTRequestSaveIssuesRaisedModel;
import com.vodafone.frt.models.FRTResponseIssueTypesModel;
import com.vodafone.frt.network.FRTConnectivityReceiver;
import com.vodafone.frt.preferences.FRTSharePrefUtil;
import com.vodafone.frt.utility.FRTBroadcasting;
import com.vodafone.frt.utility.FRTUtility;

import org.json.JSONArray;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.List;

/**
 * Created by Ashutosh Kumar on 23-Feb-18.
 */

public class FRTRaiseIssueActivity extends AppCompatActivity implements FRTCallBackInitViews, FRTCallBackForIdFind, FRTCallBackSetListeners
        , FRTAsyncCommon.FetchDataCallBack, FRTBroadcasting.CallBackBroadcast, FRTRaiseIssueAdapter.FRTCallbackListItemChecked {
    private boolean flagSession = false, check = false, checknet = false;
    private BroadcastReceiver broadcastReceiver;
    private FRTRaiseIssueActivity frtRaiseIssueActivity = this;
    FRTCallBackInitViews frtCallBackInitViews;
    FRTCallBackForIdFind frtCallBackForIdFind;
    FRTCallBackSetListeners frtCallBackSetListeners;
    private FRTBroadcasting broadcasting;
    private FRTConnectivityReceiver frtConnectivityReceiver;
    private FRTEditTextTrebuchetMS othereditText;
    private FRTButtonTrebuchetMS saveButton;
    private FRTTextviewTrebuchetMS specifyTitleTextView;
    FRTTextviewTrebuchetMS loader;
    private List<FRTResponseIssueTypesModel> reasonsList;
    private int selPos = -1;
    private ListView listView;
    private LinearLayout ivback;
    private FRTUtility frtUtility;
    FRTWEBAPI frtWEBAPI;
    private FRTRaiseIssueAdapter.FRTCallbackListItemChecked frtCallbackListItemChecked;
    List<String> frtListImagesBase64 = new ArrayList<>();
    FRTApp frtApp;
    FRTSharePrefUtil frtSharePrefUtil;
    private double latitude;
    private double longitude;
    private Location userCurrentLatLon;
    private LocationManager mLocationManager;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        getSupportActionBar().hide();
        setContentView(R.layout.activity_frtraise_issue);
        frtSharePrefUtil = FRTSharePrefUtil.getInstance(frtRaiseIssueActivity);
        callBackSetUp();
    }

    private void callBackSetUp() {
        frtCallBackInitViews = frtRaiseIssueActivity;
        frtCallBackForIdFind = frtRaiseIssueActivity;
        frtCallBackSetListeners = frtRaiseIssueActivity;
        frtCallbackListItemChecked = frtRaiseIssueActivity;
        frtWEBAPI = new FRTWEBAPI();
        frtCallBackInitViews.initAllViews();
        frtCallBackSetListeners.commonListeners();
    }

    private void setAdapter() {
        FRTRaiseIssueAdapter adapter = new FRTRaiseIssueAdapter(frtRaiseIssueActivity);
        adapter.notifyDataSetChanged();
        adapter.setDataSet(reasonsList);
        adapter.setItemCallBack(frtCallbackListItemChecked);
        listView.setAdapter(adapter);
    }

    @Override
    public void initAllViews() {
        listView = (ListView) findViewById(R.id.remarksListView);
        othereditText = (FRTEditTextTrebuchetMS) findViewById(R.id.othereditText);
        saveButton = (FRTButtonTrebuchetMS) findViewById(R.id.SaveButton);
        specifyTitleTextView = (FRTTextviewTrebuchetMS) findViewById(R.id.specifyTitleTextView);
        loader = (FRTTextviewTrebuchetMS) findViewById(R.id.loader);
        ivback = (LinearLayout) findViewById(R.id.ivback);
        frtApp = (FRTApp) frtRaiseIssueActivity.getApplication();
        frtUtility = FRTUtility.getUtilityInstance();
        frtUtility.setContext(frtRaiseIssueActivity);
        frtUtility.hideSoftKeyboard(othereditText, frtRaiseIssueActivity);
        frtUtility.settingStatusBarColor(frtRaiseIssueActivity, R.color.colorPrimary);
        frtConnectivityReceiver = new FRTConnectivityReceiver();
        broadcasting = FRTBroadcasting.getBroadcastingInstance();
        broadcasting.setContext(frtRaiseIssueActivity);
        broadcasting.setCallbackBroadcast(frtRaiseIssueActivity);
        getPauseReasons();
    }

    @Override
    public View view(int id) {
        return findViewById(id);
    }

    @Override
    public void commonListeners() {
        saveButton.setOnClickListener(onClickSave);
        ivback.setOnClickListener(frtBackClick);
        othereditText.setOnClickListener(onClickotheredit);
    }

    private View.OnClickListener frtBackClick = new View.OnClickListener() {
        @Override
        public void onClick(View view) {
            onBackPressed();
        }
    };

    private View.OnClickListener onClickSave = new View.OnClickListener() {
        @Override
        public void onClick(View view) {
            if (frtConnectivityReceiver.isConnected(frtRaiseIssueActivity)) {
                if(selPos!=-1)
                //handleSaveReason();
                    SaveRouteIssueDetail();
                else
                    frtUtility.setSnackBar(getString(R.string.selectreason), findViewById(R.id.header));
            }else {
                frtUtility.setSnackBar(getString(R.string.nointernet), findViewById(R.id.header));
            }
            /*if (check) {
                handleSaveReason();
            } else if (othereditText.getVisibility() == View.VISIBLE && !TextUtils.isEmpty(othereditText.getText().toString())) {
                handleSaveReason();
            } else {
                frtUtility.setSnackBar(getString(R.string.pausereason), listView);
            }*/
        }
    };

    private void handleSaveReason() {
        Intent intent = new Intent(frtRaiseIssueActivity, FRTRouteControllerTaskActivity.class);
        intent.putExtra("reasonresp", "Resume");
        /*if (!TextUtils.isEmpty(reasonsList.get(selPos).getDescription()) && selPos != reasonsList.size() - 1)
            intent.putExtra("remark", reasonsList.get(selPos).getDescription());
        else*/ if (!TextUtils.isEmpty(othereditText.getText().toString()))
            intent.putExtra("remark", othereditText.getText().toString());
        else
            intent.putExtra("remark", " ");
        setResult(RESULT_OK, intent);
        finish();
        overridePendingTransition(R.anim.slide_in_from_left, R.anim.slide_out_right);
    }


    @Override
    public void onBackPressed() {
        if (frtConnectivityReceiver.isConnected(frtRaiseIssueActivity)) {
            super.onBackPressed();
            Intent intent = new Intent(frtRaiseIssueActivity, FRTRouteControllerTaskActivity.class);
            startActivity(intent);
            overridePendingTransition(R.anim.slide_in_from_left, R.anim.slide_out_right);
        } else {
            frtUtility.setSnackBar(getString(R.string.nointernet), findViewById(R.id.header));
        }
    }
    private final View.OnClickListener onClickotheredit = new View.OnClickListener() {
        @Override
        public void onClick(View view) {
            othereditText.setFocusable(true);
            othereditText.setFocusableInTouchMode(true);
            frtUtility.showSoftKeyboard(othereditText, frtRaiseIssueActivity);
        }
    };
    @SuppressWarnings("deprecation")
    private void getPauseReasons() {
        FRTAsyncCommon<FRTRequestPauseReasonModel> frtAsyncCommon = FRTAsyncCommon.getAsyncInstance();
        frtAsyncCommon.setFrtModel(setUpLoginModel());
        frtAsyncCommon.setContext(frtRaiseIssueActivity);
        frtAsyncCommon.execute(frtWEBAPI.getWEBAPI(FRTAPIType.GET_ISSUE_TYPE), "getissuetype");
        frtAsyncCommon.setFetchDataCallBack(frtRaiseIssueActivity);
    }

    private FRTRequestPauseReasonModel setUpLoginModel() {
        FRTRequestPauseReasonModel cqRequestPauseReasonModel = new FRTRequestPauseReasonModel();
        cqRequestPauseReasonModel.setReasonType(getString(R.string.reason_pause));
        return cqRequestPauseReasonModel;
    }

    @RequiresApi(api = Build.VERSION_CODES.KITKAT)
    @Override
    public void getAsyncData(String response, String type) {
        if (response != null) {
            JSONObject jsonObject;
            JSONArray jsonArray;
            try {
                jsonObject = new JSONObject(response);
                if (jsonObject.optString(getString(R.string.status_key)).equalsIgnoreCase("OK")) {
                    jsonArray = jsonObject.optJSONArray("results");
                    reasonsList = new ArrayList<>();
                    for (int i = 0; i < jsonArray.length(); i++) {
                        JSONObject jsonObject1 = jsonArray.optJSONObject(i);
                        FRTResponseIssueTypesModel model = new FRTResponseIssueTypesModel();
                        model.setType_id(jsonObject1.optInt(getString(R.string.type_id)));
                        model.setDescription(jsonObject1.optString(getString(R.string.description)));
                        reasonsList.add(model);
                    }
                    /*FRTResponseIssueTypesModel model = new FRTResponseIssueTypesModel();
                    model.setReason_id("0");
                    model.setDescription("Others");
                    reasonsList.add(model);*/
                    setAdapter();
                } else if (jsonObject.optString(getString(R.string.status_key)).equals(getString(R.string.req_denied))) {
                    frtUtility.goToLogin(getString(R.string.req_denied));
                } else if (jsonObject.optString(getString(R.string.status_key)).equals(getString(R.string.session_exp))) {
                    frtUtility.goToLogin(getString(R.string.session_exp));
                } else {
                    frtUtility.setSnackBar(jsonObject.optString(getString(R.string.error_message_key)), listView);
                }
                loader.setVisibility(View.GONE);
            } catch (Exception e) {
                //   e.printStackTrace();
            }
        } else {
            frtUtility.setSnackBar("Did not get any response from server", listView);
        }
    }

    @Override
    public void onUserInteraction() {
        // TODO Auto-generated method stub
        super.onUserInteraction();
    }

    @Override
    protected void onResume() {
        super.onResume();
//        customGoogleApiClient = new CustomGoogleApiClient();
        mLocationManager = (LocationManager) getSystemService(LOCATION_SERVICE);
        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
            // TODO: Consider calling
            //    ActivityCompat#requestPermissions
            // here to request the missing permissions, and then overriding
            //   public void onRequestPermissionsResult(int requestCode, String[] permissions,
            //                                          int[] grantResults)
            // to handle the case where the user grants the permission. See the documentation
            // for ActivityCompat#requestPermissions for more details.
            return;
        }
        mLocationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, Long.valueOf(frtSharePrefUtil.getString(getString(R.string.tracktime))),
                5, mLocationListener);
    }

    @Override
    protected void onPause() {
        super.onPause();
        flagSession = true;
    }

    @Override
    protected void onStart() {
        super.onStart();
        broadcastReceiver = broadcasting.getBroadcasting();
        registerReceiver(broadcastReceiver, new IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION));
    }

    @Override
    protected void onStop() {
        super.onStop();
        unregisterReceiver(broadcastReceiver);
    }

    @Override
    public void getBroadcast(boolean isBroadcasting) {
        if (isBroadcasting) {
            frtUtility.setSnackBar(getString(R.string.nointernet), ivback);
            frtUtility.dialogHide();
            checknet = true;
        } else {
            if (checknet)
                getPauseReasons();
            checknet = false;
        }
    }

    @Override
    public void onSelect(boolean flag, int position) {
        selPos = position;
        frtApp.setIssueTypeId(String.valueOf(reasonsList.get(position).getType_id()));
        frtUtility.hideSoftKeyboard(othereditText, frtRaiseIssueActivity);
        /*if (position != reasonsList.size() - 1) {
            othereditText.setVisibility(View.GONE);
            specifyTitleTextView.setVisibility(View.GONE);
            frtApp.setReasonId(String.valueOf(reasonsList.get(position).getType_id()));
            check = true;
        } else {
            othereditText.setVisibility(View.VISIBLE);
            specifyTitleTextView.setVisibility(View.VISIBLE);
            frtApp.setReasonId(String.valueOf("0"));
            check = false;

        }*/
    }
    private void SaveRouteIssueDetail() {
        if (frtConnectivityReceiver.isConnected(frtRaiseIssueActivity)) {
//            frtApp.setCheckForDialog("Yes");
            final ProgressDialog progressDialog = new ProgressDialog(frtRaiseIssueActivity);
            frtUtility.show(progressDialog);
            @SuppressWarnings("unchecked") final FRTAsyncCommon<FRTRequestSaveIssuesRaisedModel> frtAsyncCommon = FRTAsyncCommon.getAsyncInstance();
            frtAsyncCommon.setContext(frtRaiseIssueActivity);
            frtAsyncCommon.setFrtModel(setUpSaveissuesraisedModel());
            frtAsyncCommon.execute(frtWEBAPI.getWEBAPI(FRTAPIType.SAVE_ROUTE_ISSUE_DETAIL), "SaveRouteIssueDetail");
            frtAsyncCommon.setFetchDataCallBack(new FRTAsyncCommon.FetchDataCallBack() {
                @Override
                public void getAsyncData(String response, String type) {
                    try {
                        progressDialog.dismiss();
                        JSONObject jsonObject = new JSONObject(response);
                        if (jsonObject.optString("status").equals("OK")) {
                            frtUtility.setSnackBar(getString(R.string.issues_raised), saveButton);
                            Intent intent = new Intent(frtRaiseIssueActivity, FRTRouteControllerTaskActivity.class);
                            setResult(RESULT_OK, intent);
                            finish();
                        } else if (jsonObject.optString(getString(R.string.status_key)).equals(getString(R.string.req_denied))) {
                            frtUtility.goToLogin(getString(R.string.req_denied));
                        } else if (jsonObject.optString(getString(R.string.status_key)).equals(getString(R.string.session_exp))) {
                            frtUtility.goToLogin(getString(R.string.session_exp));
                        } else
                            frtUtility.setSnackBar(jsonObject.optString("error_message"), saveButton);
                    } catch (Exception e) {
                    }
                }
            });
        } else {
            frtUtility.setSnackBar(getString(R.string.nointernet), saveButton);
        }
    }

    private FRTRequestSaveIssuesRaisedModel setUpSaveissuesraisedModel() {
        FRTRequestSaveIssuesRaisedModel frtRequestSaveWeatherModel = new FRTRequestSaveIssuesRaisedModel();
        try {
            frtRequestSaveWeatherModel.setUserId(Integer.parseInt(frtSharePrefUtil.getString(getString(R.string.userkey))));
            frtRequestSaveWeatherModel.setManagerId(frtSharePrefUtil.getString(getString(R.string.managerkey)));
            frtRequestSaveWeatherModel.setRouteAssignmentId(Integer.parseInt(frtSharePrefUtil.getString("routeassigmentid")));
            if (userCurrentLatLon != null) {
                frtRequestSaveWeatherModel.setLatitude(String.valueOf(/*userCurrentLatLon.*/latitude));
                frtRequestSaveWeatherModel.setLongitude(String.valueOf(/*userCurrentLatLon.*/longitude));
            }
            frtRequestSaveWeatherModel.setMobileTime(frtUtility.getDateAndTime(false));
            frtRequestSaveWeatherModel.setIssueTypeId(/*frtApp.getIssueTypeId()*/String.valueOf(selPos));

            frtRequestSaveWeatherModel.setRemark(othereditText.getText().toString());
            frtRequestSaveWeatherModel.setImages(frtListImagesBase64);
        } catch (Exception ex) {
        }
        return frtRequestSaveWeatherModel;
    }
 private final LocationListener mLocationListener = new LocationListener() {
        @Override
        public void onLocationChanged(final Location location) {
            userCurrentLatLon = location;
            latitude = location.getLatitude();
            longitude = location.getLongitude();
        }

        @Override
        public void onStatusChanged(String s, int i, Bundle bundle) {

        }

        @Override
        public void onProviderEnabled(String s) {

        }

        @Override
        public void onProviderDisabled(String s) {

        }
    };
}

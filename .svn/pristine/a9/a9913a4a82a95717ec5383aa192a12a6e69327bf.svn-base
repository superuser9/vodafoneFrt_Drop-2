package com.vodafone.frt.services;

import android.Manifest;
import android.annotation.SuppressLint;
import android.app.IntentService;
import android.app.Notification;
import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.location.Location;
import android.location.LocationListener;
import android.os.Bundle;
import android.os.IBinder;
import android.os.PowerManager;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.v4.content.ContextCompat;
import android.text.TextUtils;
import android.util.Log;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.location.LocationRequest;
import com.google.android.gms.location.LocationServices;
import com.google.android.gms.maps.model.LatLng;
import com.vodafone.frt.R;
import com.vodafone.frt.apis.FRTAsyncCommon;
import com.vodafone.frt.apis.FRTWEBAPI;
import com.vodafone.frt.app.FRTApp;
import com.vodafone.frt.enums.FRTAPIType;
import com.vodafone.frt.models.FRTRequestPlannedRouteModel;
import com.vodafone.frt.models.FRTRequestSaveRouteLocationmodel;
import com.vodafone.frt.models.FRTResponsePlannedRouteModel;
import com.vodafone.frt.network.FRTConnectivityReceiver;
import com.vodafone.frt.preferences.FRTSharePrefUtil;
import com.vodafone.frt.receivers.FRTLocationUploaderReceiver;
import com.vodafone.frt.utility.FRTUtility;

import org.json.JSONArray;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

/**
 * An {@link IntentService} subclass for handling asynchronous task requests in
 * a service on a separate handler thread.
 * <p>
 * TODO: Customize class - update intent actions, extra parameters and static
 * helper methods.
 */
public class FRTLocationUploaderService /*extends Service implements LocationListener,
        GoogleApiClient.ConnectionCallbacks, GoogleApiClient.OnConnectionFailedListener, com.google.android.gms.location.LocationListener*/ {
    /*FRTLocationUploaderReceiver mReceiver;
    FRTLocationUploaderService frtLocationUploaderService = this;
    FRTWEBAPI frtwebapi;
    FRTUtility frtUtility;
    FRTSharePrefUtil frtSharePrefUtil;
    //    FRTLocationDb frtLocationDb;
    public static FRTApp frtApp;
    LocationRequest locationRequest;
    GoogleApiClient googleApiClient;
    Location locationCurrent;
    LatLng userCurrentLatLon;
    double tempTime, lastTime;
    LatLng lastLoc, tempLoc;
    String lat, lon;
    boolean *//*isPlannedDataAvailable = false, *//*isGoogleClient = false;
    boolean isTempDataSet = false;
    FRTConnectivityReceiver frtCnnectivityReceiver;
    List<FRTResponsePlannedRouteModel> frtResponsePlannedRouteModelList;
    MyThread t;

    public FRTLocationUploaderService() {
    }

    public FRTLocationUploaderService(Context applicationContext) {
        super();
        Log.i("HERE", "here I am!");
    }

    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        //TODO do something useful
        frtwebapi = new FRTWEBAPI();
        frtUtility = FRTUtility.getUtilityInstance();
        frtUtility.setContext(getApplicationContext());
        frtSharePrefUtil = FRTSharePrefUtil.getInstance(getApplicationContext());
//        frtLocationDb = new FRTLocationDb(getApplicationContext());
        frtApp = (FRTApp) getApplication();
        frtCnnectivityReceiver = new FRTConnectivityReceiver();
        setWakeupLock();
        timerCode();
        //If service is killed while starting, it restarts.
        return Service.START_STICKY;
    }

    public int NOTIFICATION_ID = 123456;
    PowerManager.WakeLock wakeLock;

    @SuppressWarnings("deprecation")
    public void setWakeupLock() {
//        PendingIntent contentIntent;
//        contentIntent = PendingIntent.getActivity(this, 0,
//                new Intent(this, FRTSplashActivity.class), 0);
//        frtApp.setIsNotification(true);
        *//*mNotificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);
        mBuilder = new NotificationCompat.Builder(this)
                        .setSmallIcon(R.mipmap.ic_launcher)
                        .setContentTitle("Smart Patroller")
//                        .setOngoing(true)
                        .setAutoCancel(true);
        mBuilder.setContentIntent(contentIntent);
        Notification notification = mBuilder.build();
        notification.flags |= Notification.FLAG_AUTO_CANCEL;
        mNotificationManager.notify(NOTIFICATION_ID, notification);*//*
        Notification noti = null;
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN) {
            noti = new Notification.Builder(frtLocationUploaderService)
                    .setContentTitle("SMART PATROLLER")
                    .build();
        }
        startForeground(NOTIFICATION_ID, noti); //NOTIFICATION_ID is a random integer value which has to be unique in an app
        PowerManager powerManager = (PowerManager) getSystemService(POWER_SERVICE);
        wakeLock = powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, "SmartPatrollerWaitLock");
        wakeLock.acquire();
    }

    private void timerCode() {
        if (t != null) {
            t.stop = true;
            t = null;
        }
        // Wait for 10 seconds
        final long wait = Long.valueOf(frtSharePrefUtil.getString(getString(R.string.tracktime)));
        t = new MyThread(wait);
        t.start();
    }

    public class MyThread extends Thread {
        public boolean stop = false;
        //        long prevTime = 0;
        long wait = 0;

        *//*private static MyThread myThread = new MyThread(wait);


        public static MyThread getMyThreadInstance(){
            if (myThread!=null)
                return myThread;
            else
                return new MyThread(wait);
        }*//*

        public MyThread(long wait) {
            this.wait = wait;
        }

        @Override
        public void run() {
            synchronized (frtLocationUploaderService) {
                while (!stop) {
                    try {
                        //frtApp.appendTextToFile("Timer called " + frtSharePrefUtil.getString(getString(R.string.reasonname)));
//                    if (prevTime == 0) {
//                        prevTime = Calendar.getInstance().getTime().getTime();
//                    }
                        long t = Calendar.getInstance().getTime().getTime();
//                        if (t - prevTime > 7000) {
//                            // send data which is not yet sent to server
//                            frtApp.appendTextToFile("In prevTime: " + t + ":pt:" + prevTime);
//                            while (true) {
//                                prevTime += wait;
//                                if (t - prevTime < wait)
//                                    break;
//                                // get data from database and send to server
//                                //#save frtSharePrefUtil.getString(getString(R.string.reasonname)) to DB as well
//                                // get data from DB : select * from table where mobileTime < prevTime order by mobileTime desc limit 1
//                                // send to server
//                                frtApp.appendTextToFile("Sendingfor: " + prevTime);
//                                getRouteTrackData(getApplicationContext(), t, prevTime);
//                            }
//                        }
                        if (frtSharePrefUtil.getString(getString(R.string.reasonname)) != null && !frtSharePrefUtil.getString(getString(R.string.reasonname)).equals("Pause")
                                && !frtSharePrefUtil.getString(getString(R.string.reasonname)).equals("End") && !frtSharePrefUtil.getString(getString(R.string.reasonname)).equals("Timeout")) {
                            if (!isGoogleClient) {
                                buildGoogleApiClient();
                                getPlannedRouteData(getApplicationContext());
                                isGoogleClient = true;
                            }
                            getRouteTrackData(getApplicationContext(), t, 0);
                        }
//                    frtUtility.writeLogFile();
//                    prevTime = t;
                        t = Calendar.getInstance().getTime().getTime() - t;
                        //frtApp.appendTextToFile("before sleep time: time taken: " + t + " : sleep time:" + (wait - t));
                        Thread.sleep((wait - t) <= 0 ? wait : (wait - t));
                    } catch (InterruptedException e) {
                    }
                }
            }
        }
    }

    private void getPlannedRouteData(Context context) {
        if (frtCnnectivityReceiver.isConnected(context)) {
            frtApp.setCheckForDialog("Yes");
            final FRTAsyncCommon<FRTRequestPlannedRouteModel> frtAsyncCommon = FRTAsyncCommon.getAsyncInstance();
            frtAsyncCommon.setContext(context);
            frtAsyncCommon.setFrtModel(setUpPlannedRouteModel());
            frtAsyncCommon.execute(frtwebapi.getWEBAPI(FRTAPIType.PLANNED_ROUTE), "getplannedroute");
            frtAsyncCommon.setFetchDataCallBack(new FRTAsyncCommon.FetchDataCallBack() {
                @Override
                public void getAsyncData(String response, String type) {
                    try {
                        JSONObject jsonObject = new JSONObject(response);
                        if (jsonObject.optString("status").equals("OK")) {
                            JSONObject jo = jsonObject.optJSONObject("results");
                            JSONArray jsonArray = jo.optJSONArray("planned_route");
                            frtResponsePlannedRouteModelList = new ArrayList<>();
                            for (int i = 0; i < jsonArray.length(); i++) {
                                JSONObject jo1 = jsonArray.optJSONObject(i);
                                if (jo1.optString("T").equals("R")) {
                                    FRTResponsePlannedRouteModel frtResponsePlannedRouteModel = new FRTResponsePlannedRouteModel();
                                    frtResponsePlannedRouteModel.setLat(jo1.optDouble("lat"));
                                    frtResponsePlannedRouteModel.setLng(jo1.optDouble("lng"));
                                    frtResponsePlannedRouteModelList.add(frtResponsePlannedRouteModel);
                                } else if (jo1.optString("T").equals("null")) {
                                    FRTResponsePlannedRouteModel frtResponsePlannedRouteModel = new FRTResponsePlannedRouteModel();
                                    frtResponsePlannedRouteModel.setLat(jo1.optDouble("lat"));
                                    frtResponsePlannedRouteModel.setLng(jo1.optDouble("lng"));
                                    frtResponsePlannedRouteModelList.add(frtResponsePlannedRouteModel);
                                }
                            }
                        } else if (jsonObject.optString("status").equals(getString(R.string.req_denied))) {
                        }
                    } catch (Exception e) {
                    }
                }
            });
        } else {
        }
    }

    private FRTRequestPlannedRouteModel setUpPlannedRouteModel() {
        FRTRequestPlannedRouteModel frtRequestAssignedRouteModel = new FRTRequestPlannedRouteModel();
        try {
            if (!frtSharePrefUtil.getString("routeId").isEmpty())
                frtRequestAssignedRouteModel.setRouteId(Integer.parseInt(frtSharePrefUtil.getString("routeId")));
            if (!frtSharePrefUtil.getString("routeRefId").isEmpty())
                frtRequestAssignedRouteModel.setRouteRefId(Integer.parseInt(frtSharePrefUtil.getString("routeRefId")));

        } catch (Exception ex) {
        }
        return frtRequestAssignedRouteModel;
    }

    @Nullable
    @Override
    public IBinder onBind(Intent intent) {
        return null;
    }

    private void getRouteTrackData(final Context context, final long t, long prevTime) {
        //frtApp.appendTextToFile("getRouteTrackData called");
        //frtApp.appendTextToFile("A: " + (Calendar.getInstance().getTime().getTime() - t));
        if (frtCnnectivityReceiver.isConnected(context)) {
            FRTAsyncCommon<FRTRequestSaveRouteLocationmodel> frtAsyncCommon = FRTAsyncCommon.getAsyncInstance();
            frtAsyncCommon.setContext(context);
            //frtApp.appendTextToFile("B: " + (Calendar.getInstance().getTime().getTime() - t));
            //frtApp.appendTextToFile("PrevTime: " + prevTime);
//            if (prevTime != 0) {
//                Date d = new Date();
//                d.setTime(prevTime);
//                String timestr = frtUtility.getDateAndTime(d, true);
//                frtAsyncCommon.setFrtModel(frtLocationDb.getLocationTrackingToUpload(timestr, prevTime));
//            } else {
            frtAsyncCommon.setFrtModel(setUpSaveRouteModel(context));
//            }
            //frtApp.appendTextToFile("C: " + (Calendar.getInstance().getTime().getTime() - t));
            frtAsyncCommon.execute(frtwebapi.getWEBAPI(FRTAPIType.SAVE_ROUTE), "saveroute");
            //frtApp.appendTextToFile("D: " + (Calendar.getInstance().getTime().getTime() - t));
            frtAsyncCommon.setFetchDataCallBack(new FRTAsyncCommon.FetchDataCallBack() {
                @Override
                public void getAsyncData(String response, String type) {
                    try {
                        //frtApp.appendTextToFile("E: " + (Calendar.getInstance().getTime().getTime() - t));
                        JSONObject jsonObject = new JSONObject(response);
                        if (jsonObject.optString("status").equals("OK")) {
                            Log.d("locationupload", "true");
                        } else if (jsonObject.optString("status").equals(getString(R.string.req_denied)))
                            frtUtility.goToLogin();
                        else if (jsonObject.optString("status").equals(getString(R.string.session_exp)))
                            frtUtility.goToLogin();
                        //frtApp.appendTextToFile("f: " + (Calendar.getInstance().getTime().getTime() - t));
                    } catch (Exception e) {
                    }
                }
            });
        }
    }

    private FRTRequestSaveRouteLocationmodel setUpSaveRouteModel(Context context) {
        FRTRequestSaveRouteLocationmodel frtRequestSaveRouteLocationmodel = new FRTRequestSaveRouteLocationmodel();
        try {
            frtRequestSaveRouteLocationmodel.setRouteAssignmentId(frtSharePrefUtil.getString("routeassigmentid"));
            if (!TextUtils.isEmpty(frtApp.getLatitude()) && !frtApp.getLatitude().equals("0.0"))
                frtRequestSaveRouteLocationmodel.setLatitude(frtApp.getLatitude());
            if (!TextUtils.isEmpty(frtApp.getLongitude()) && !frtApp.getLongitude().equals("0.0"))
                frtRequestSaveRouteLocationmodel.setLongitude(frtApp.getLongitude());
            try {
                frtRequestSaveRouteLocationmodel.setDeviationFromPlanned(String.valueOf(frtUtility.getShortestDeviationpath(frtResponsePlannedRouteModelList, userCurrentLatLon)));
            } catch (Exception ex) {
            }
            try {
                if (!TextUtils.isEmpty(frtUtility.getDateAndTime(true)))
                    frtRequestSaveRouteLocationmodel.setMobileTime(frtUtility.getDateAndTime(true));
            } catch (Exception ex) {
            }
//            try {
//                frtRequestSaveRouteLocationmodel.setDeviceTime(Calendar.getInstance().getTime().getTime());
//            } catch (Exception ex) {
//            }
            try {
                if (!TextUtils.isEmpty(frtApp.getDrivingSpeed()))
                    frtRequestSaveRouteLocationmodel.setDrivingSpeed(*//*frtApp.getDrivingSpeed()*//*"0");
            } catch (Exception ex) {
            }
            try {
                if (!TextUtils.isEmpty(frtApp.getDistance()))
                    frtRequestSaveRouteLocationmodel.setDistFromLastLoc(frtApp.getDistance());
            } catch (Exception ex) {
            }
            frtRequestSaveRouteLocationmodel.setUserId(frtSharePrefUtil.getString(context.getString(R.string.userkey)));
            frtRequestSaveRouteLocationmodel.setBatteryPercentage(String.valueOf(frtUtility.getBatteryPercentage(getApplicationContext())));
            if (!TextUtils.isEmpty(frtRequestSaveRouteLocationmodel.getDeviationFromPlanned()) && !TextUtils.isEmpty(frtSharePrefUtil.getString(getString(R.string.Bufferlimit))))
                frtRequestSaveRouteLocationmodel.setIsInsideBuffer(Float.parseFloat(frtRequestSaveRouteLocationmodel.getDeviationFromPlanned()) >= Float.parseFloat(frtSharePrefUtil.getString(getString(R.string.Bufferlimit))) ? "false" : "true");
            try {
                frtRequestSaveRouteLocationmodel.setNetworkProvider(*//*frtUtility.getNetworkProvider()*//*"Airtel");
            } catch (Exception ex) {
            }
        } catch (Exception ex) {
        }
        return frtRequestSaveRouteLocationmodel;
    }

    @Override
    public void onLocationChanged(Location location) {
        try {
            locationCurrent = location;
            double latitude = location.getLatitude();
            double longitude = location.getLongitude();
            double timeDifference;
            userCurrentLatLon = new LatLng(latitude, longitude);
            if (!isTempDataSet) {
                tempLoc = userCurrentLatLon;
                tempTime = System.currentTimeMillis();
                isTempDataSet = true;
            }
            try {
                lastLoc = tempLoc;
                tempLoc = userCurrentLatLon;
                frtApp.setDistance(String.valueOf(frtUtility.calculationByDistance(lastLoc, userCurrentLatLon)));
            } catch (Exception ex) {
            }
            try {
                lastTime = tempTime;
                double currentTime = System.currentTimeMillis();
                tempTime = currentTime;
                timeDifference = (currentTime - lastTime) / 1000;
                frtApp.setDrivingSpeed(Float.parseFloat(frtApp.getDistance()) / timeDifference + "");
            } catch (Exception ex) {
            }
            if (userCurrentLatLon.latitude != 0.0 && userCurrentLatLon.longitude != 0.0) {
                frtApp.setLatitude(String.valueOf(userCurrentLatLon.latitude));
                frtApp.setLongitude(String.valueOf(userCurrentLatLon.longitude));
            }
            //frtLocationDb.addLocationTracking(setUpSaveRouteModel(frtLocationTrackingService));
            //frtLocationDb.exportDB(frtLocationTrackingService);
        } catch (Exception ex) {
        }
    }

    @Override
    public void onStatusChanged(String s, int i, Bundle bundle) {

    }

    @Override
    public void onProviderEnabled(String s) {

    }

    @Override
    public void onProviderDisabled(String s) {

    }

    @Override
    public void onConnected(@Nullable Bundle bundle) {
        try {
            locationRequest = new LocationRequest();
            locationRequest.setInterval(60000);
            locationRequest.setFastestInterval(60000);
            locationRequest.setSmallestDisplacement(20);
            locationRequest.setPriority(LocationRequest.PRIORITY_BALANCED_POWER_ACCURACY);
            if (ContextCompat.checkSelfPermission(getApplicationContext(),
                    Manifest.permission.ACCESS_FINE_LOCATION)
                    == PackageManager.PERMISSION_GRANTED) {
                LocationServices.FusedLocationApi.requestLocationUpdates(googleApiClient, locationRequest, frtLocationUploaderService);
            }
        } catch (Exception ex) {
        }
    }

    @Override
    public void onConnectionSuspended(int i) {

    }

    @Override
    public void onConnectionFailed(@NonNull ConnectionResult connectionResult) {

    }

    protected synchronized void buildGoogleApiClient() {
        googleApiClient = new GoogleApiClient.Builder(getApplicationContext())
                .addConnectionCallbacks(frtLocationUploaderService)
                .addOnConnectionFailedListener(frtLocationUploaderService)
                .addApi(LocationServices.API)
                .build();
        googleApiClient.connect();
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        Log.i("EXIT", "ondestroy!");
        Intent broadcastIntent = new Intent("frt.vodafone.com.ActivityRecognition.RestartSensor");
        sendBroadcast(broadcastIntent);
        stoptimertask();
    }

    @SuppressWarnings("deprecation")
    private void stoptimertask() {
        if (t != null) {
            t.stop = true;
            t = null;
            wakeLock.release();
        }
    }*/
}

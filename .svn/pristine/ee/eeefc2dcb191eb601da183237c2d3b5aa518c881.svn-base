package com.vodafone.frt.activities;

import android.content.BroadcastReceiver;
import android.content.Intent;
import android.content.IntentFilter;
import android.graphics.PorterDuff;
import android.net.ConnectivityManager;
import android.os.Bundle;
import android.support.design.widget.TabLayout;
import android.support.v4.content.ContextCompat;
import android.support.v4.view.ViewPager;
import android.support.v7.app.AppCompatActivity;
import android.text.TextUtils;
import android.view.View;
import android.widget.LinearLayout;

import com.vodafone.frt.R;
import com.vodafone.frt.adapters.FRTFragPagerAdapter;
import com.vodafone.frt.apis.FRTAsyncCommon;
import com.vodafone.frt.apis.FRTWEBAPI;
import com.vodafone.frt.app.FRTApp;
import com.vodafone.frt.callbacks.FRTCallBackForIdFind;
import com.vodafone.frt.callbacks.FRTCallBackInitViews;
import com.vodafone.frt.callbacks.FRTCallBackSetListeners;
import com.vodafone.frt.constants.FRTConstants;
import com.vodafone.frt.enums.FRTAPIType;
import com.vodafone.frt.fonts.FRTTextviewTrebuchetMS;
import com.vodafone.frt.models.FRTRequestModelLogout;
import com.vodafone.frt.models.FRTRequestMyTaskModel;
import com.vodafone.frt.models.FRTResponseMyTaskModel;
import com.vodafone.frt.network.FRTConnectivityReceiver;
import com.vodafone.frt.preferences.FRTSharePrefUtil;
import com.vodafone.frt.utility.FRTBroadcasting;
import com.vodafone.frt.utility.FRTUtility;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;

/**
 * Created by vishal
 */
public class FRTMyTaskActivity extends AppCompatActivity implements FRTCallBackInitViews, FRTCallBackForIdFind, FRTCallBackSetListeners,
        TabLayout.OnTabSelectedListener, FRTAsyncCommon.FetchDataCallBack, FRTBroadcasting.CallBackBroadcast {
    private final FRTMyTaskActivity frtMyTaskActivity = this;
    private final int[] tabIcons = {
            R.mipmap.pending,
            R.mipmap.assigned,
            R.mipmap.inprogress,
            R.mipmap.closed
    };
    private boolean flagnet = false, inOncreate = false;
    private BroadcastReceiver broadcastReceiver;
    private FRTBroadcasting broadcasting;
    private FRTCallBackForIdFind frtCallBackForIdFind;
    private FRTConnectivityReceiver frtConnectivityReceiver;
    private FRTTextviewTrebuchetMS loader;
    private FRTUtility frtUtility;
    private FRTConstants frtConstants;
    private FRTSharePrefUtil frtSharePrefUtil;
    private FRTWEBAPI frtwebapi;
    private FRTApp frtApp;
    private final View.OnClickListener frtBackClick = new View.OnClickListener() {
        @Override
        public void onClick(View view) {
            onBackPressed();
        }
    };
    private LinearLayout ivback;
    private ArrayList<FRTResponseMyTaskModel> frtResponseMyTaskModelList;
    private int assignedCount, pendingCount, inProgressCount, closedCount;
    private ViewPager viewPager;
    private TabLayout tabLayout;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        //noinspection ConstantConditions
        getSupportActionBar().hide();
        setContentView(R.layout.activity_frtmy_task);
        callBackSetUp();
    }

    /**
     * This method initialize the callback and objects
     */
    private void callBackSetUp() {
        FRTCallBackInitViews frtCallBackInitViews = frtMyTaskActivity;
        frtCallBackForIdFind = frtMyTaskActivity;
        FRTCallBackSetListeners frtCallBackSetListeners = frtMyTaskActivity;
        frtCallBackInitViews.initAllViews();
        frtCallBackSetListeners.commonListeners();
    }

    @Override
    public View view(int id) {
        return findViewById(id);
    }

    @Override
    public void initAllViews() {
        ivback = (LinearLayout) frtCallBackForIdFind.view(R.id.ivback);
        tabLayout = (TabLayout) frtCallBackForIdFind.view(R.id.tab_layout);
        viewPager = (ViewPager) frtCallBackForIdFind.view(R.id.pager);
        loader = (FRTTextviewTrebuchetMS) frtCallBackForIdFind.view(R.id.loader);
        frtConstants = new FRTConstants();
        frtUtility = FRTUtility.getUtilityInstance();
        frtUtility.setContext(frtMyTaskActivity);
        frtUtility.settingStatusBarColor(frtMyTaskActivity, R.color.colorPrimary);
        frtSharePrefUtil = FRTSharePrefUtil.getInstance(frtMyTaskActivity);
        frtConnectivityReceiver = new FRTConnectivityReceiver();
        broadcasting = FRTBroadcasting.getBroadcastingInstance();
        broadcasting.setContext(frtMyTaskActivity);
        broadcasting.setCallbackBroadcast(frtMyTaskActivity);
        frtwebapi = new FRTWEBAPI();
        frtApp = (FRTApp) getApplication();
        inOncreate = true;
        getTaskDetail();
    }

    @SuppressWarnings("deprecation")
    private void getTaskDetail() {
        @SuppressWarnings("unchecked") FRTAsyncCommon<FRTRequestMyTaskModel> frtAsyncCommon = FRTAsyncCommon.getAsyncInstance();
        frtAsyncCommon.setFrtModel(setUpTaskDetailModel());
        frtAsyncCommon.setContext(frtMyTaskActivity);
        frtAsyncCommon.execute(frtwebapi.getWEBAPI(FRTAPIType.FETCH_TASK_DETAIL), "gettaskdetail");
        frtAsyncCommon.setFetchDataCallBack(frtMyTaskActivity);
    }

    private FRTRequestMyTaskModel setUpTaskDetailModel() {
        FRTRequestMyTaskModel cqRequestPauseReasonModel = new FRTRequestMyTaskModel();
        if (!TextUtils.isEmpty(frtSharePrefUtil.getString(getString(R.string.userkey))))
            cqRequestPauseReasonModel.setUserId(Integer.parseInt(frtSharePrefUtil.getString(getString(R.string.userkey))));
        return cqRequestPauseReasonModel;
    }

    @Override
    public void getAsyncData(String response, String type) {
        if (response != null) {
            if (type.equals("logout")) {
                try {
                    JSONObject jsonObject = new JSONObject(response);
                    if (jsonObject.optString(getString(R.string.status_key)).equals("OK")) {
                        frtSharePrefUtil.setBoolean(frtConstants.IS_LOGGED_IN, false);
                        frtUtility.clearPrerences();
                        finish();
                        startActivity(new Intent(frtMyTaskActivity, FRTLoginActivity.class));
                        overridePendingTransition(R.anim.slide_in_from_left, R.anim.slide_out_right);
                    }
                    if (jsonObject.optString(getString(R.string.status_key)).equalsIgnoreCase(getString(R.string.req_denied))) {
                        frtSharePrefUtil.setBoolean(frtConstants.IS_LOGGED_IN, false);
                        frtUtility.clearPrerences();
                        finish();
                        startActivity(new Intent(frtMyTaskActivity, FRTLoginActivity.class));
                        overridePendingTransition(R.anim.slide_in_from_left, R.anim.slide_out_right);
                    }
                } catch (JSONException ignored) {
                }
            } else {
                try {
                    JSONObject jsonObject = new JSONObject(response);
                    JSONArray jsonArray;
                    if (jsonObject.optString(getString(R.string.status_key)).equalsIgnoreCase("OK")) {
                        jsonArray = jsonObject.optJSONArray("results");
                        frtResponseMyTaskModelList = new ArrayList<>();
                        for (int i = 0; i < jsonArray.length(); i++) {
                            JSONObject jo = jsonArray.optJSONObject(i);
                            FRTResponseMyTaskModel frtResponseUserDetailModel = new FRTResponseMyTaskModel();
                            frtResponseUserDetailModel.setActual_end_time(jo.optString("actual_end_time"));
                            frtResponseUserDetailModel.setActual_start_time(jo.optString("actual_start_time"));
                            frtResponseUserDetailModel.setCreated_by_name(jo.optString("created_by_name"));
                            frtResponseUserDetailModel.setCreated_on(jo.optString("email_id"));
                            frtResponseUserDetailModel.setModified_by_name(jo.optString("modified_by_name"));
                            frtResponseUserDetailModel.setModified_on(jo.optString("modified_on"));
                            frtResponseUserDetailModel.setPatroller_id(jo.optInt("patroller_id"));
                            frtResponseUserDetailModel.setPatroller_name(jo.optString("patroller_name"));
                            frtResponseUserDetailModel.setPlanned_end_time(jo.optString("planned_end_time"));
                            frtResponseUserDetailModel.setPlanned_start_time(jo.optString("planned_start_time"));
                            frtResponseUserDetailModel.setRoute_assigned_id(jo.optInt("route_assigned_id"));
                            frtResponseUserDetailModel.setRoute_id(jo.optInt("route_id"));
                            frtResponseUserDetailModel.setRoute_name(jo.optString("route_name"));
                            frtResponseUserDetailModel.setRoute_ref_id(jo.optInt("route_ref_id"));
                            frtResponseUserDetailModel.setScheduled_assigment_id(jo.optInt("scheduled_assigment_id"));
                            frtResponseUserDetailModel.setStatus(jo.optString("status"));
                            frtResponseMyTaskModelList.add(frtResponseUserDetailModel);
                        }
                        setUpTabs();
                    } else if (jsonObject.optString(getString(R.string.status_key)).equals(getString(R.string.req_denied))) {
                        frtUtility.goToLogin(getString(R.string.req_denied));
                        frtApp.setTabPosition(0);
                        doLogout();
                    } else if (jsonObject.optString(getString(R.string.status_key)).equals(getString(R.string.session_exp))) {
                        frtUtility.goToLogin(getString(R.string.session_exp));
                        frtApp.setTabPosition(0);
                        doLogout();
                    } else {
                        frtUtility.setSnackBar(jsonObject.optString(getString(R.string.error_message_key)), ivback);
                    }
                } catch (Exception ignored) {
                }
            }
            loader.setVisibility(View.GONE);
        } else {
            frtUtility.setSnackBar(getString(R.string.userpasserror), ivback);
        }
    }

    @SuppressWarnings("deprecation")
    private void doLogout() {
        @SuppressWarnings("unchecked") FRTAsyncCommon<FRTRequestModelLogout> frtAsyncCommon = FRTAsyncCommon.getAsyncInstance();
        frtAsyncCommon.setFrtModel(setUpLogoutModel());
        frtAsyncCommon.setContext(frtMyTaskActivity);
        frtAsyncCommon.execute(frtwebapi.getWEBAPI(FRTAPIType.LOGOUT), "logout");
        frtAsyncCommon.setFetchDataCallBack(frtMyTaskActivity);
    }

    private FRTRequestModelLogout setUpLogoutModel() {
        FRTRequestModelLogout cqRequestModelLogout = new FRTRequestModelLogout();
        try {
            cqRequestModelLogout.setUserId(Integer.parseInt(frtSharePrefUtil.getString(getString(R.string.userkey))));
        } catch (Exception ignored) {
        }
        return cqRequestModelLogout;
    }

    private void setUpTabs() {
        for (FRTResponseMyTaskModel frtResponseMyTaskModel :
                frtResponseMyTaskModelList) {
            switch (frtResponseMyTaskModel.getStatus()) {
                case "Assigned":
                    assignedCount++;
                    break;
                case "Pending":
                    pendingCount++;
                    break;
                case "Inprogress":
                    inProgressCount++;
                    break;
                case "Paused":
                    inProgressCount++;
                    break;
                case "Resume":
                    inProgressCount++;
                    break;
                case "Completed":
                    closedCount++;
                    break;
            }
        }
        tabLayout.addTab(tabLayout.newTab().setText(getString(R.string.assigned) + "[" + assignedCount + "]"));
        tabLayout.addTab(tabLayout.newTab().setText(getString(R.string.inpg) + "[" + inProgressCount + "]"));
        tabLayout.addTab(tabLayout.newTab().setText(getString(R.string.pending) + "[" + pendingCount + "]"));
        tabLayout.addTab(tabLayout.newTab().setText(getString(R.string.complete) + "[" + closedCount + "]"));
        setupTabIcons();
        FRTFragPagerAdapter adapter = new FRTFragPagerAdapter(getSupportFragmentManager(), tabLayout.getTabCount());
        adapter.notifyDataSetChanged();
        adapter.setTaskList(frtResponseMyTaskModelList);
        adapter.setInProgressCount(inProgressCount);
        viewPager.setAdapter(adapter);
        if (frtApp.getTabPosition() != -1)
            selectPage(frtApp.getTabPosition());
    }

    @SuppressWarnings("deprecation")
    private void setupTabIcons() {
        //noinspection ConstantConditions
        tabLayout.getTabAt(0).setIcon(tabIcons[0]);
        //noinspection ConstantConditions
        tabLayout.getTabAt(1).setIcon(tabIcons[1]);
        //noinspection ConstantConditions
        tabLayout.getTabAt(2).setIcon(tabIcons[2]);
        //noinspection ConstantConditions
        tabLayout.getTabAt(3).setIcon(tabIcons[3]);
        //noinspection ConstantConditions,ConstantConditions
        tabLayout.getTabAt(0).getIcon().setColorFilter(getResources().getColor(R.color.colorPrimary), PorterDuff.Mode.SRC_IN);
        //noinspection ConstantConditions,ConstantConditions
        tabLayout.getTabAt(1).getIcon().setColorFilter(getResources().getColor(android.R.color.white), PorterDuff.Mode.SRC_IN);
        //noinspection ConstantConditions,ConstantConditions
        tabLayout.getTabAt(2).getIcon().setColorFilter(getResources().getColor(android.R.color.white), PorterDuff.Mode.SRC_IN);
        //noinspection ConstantConditions,ConstantConditions
        tabLayout.getTabAt(3).getIcon().setColorFilter(getResources().getColor(android.R.color.white), PorterDuff.Mode.SRC_IN);
    }

    /**
     * This method is used for setting the listener on views.
     */
    @SuppressWarnings("deprecation")
    @Override
    public void commonListeners() {
        ivback.setOnClickListener(frtBackClick);
        viewPager.addOnPageChangeListener(new TabLayout.TabLayoutOnPageChangeListener(tabLayout));
        tabLayout.setOnTabSelectedListener(frtMyTaskActivity);
    }

    @Override
    public void onBackPressed() {
        if (frtConnectivityReceiver.isConnected(frtMyTaskActivity)) {
            super.onBackPressed();
            frtApp.setTabPosition(-1);
            Intent intent = new Intent(frtMyTaskActivity, FRTNavigationScreenActivity.class);
            startActivity(intent);
            overridePendingTransition(R.anim.slide_in_from_left, R.anim.slide_out_right);
        } else {
            frtUtility.setSnackBar(getString(R.string.nointernet), findViewById(R.id.header));
        }
    }

    @Override
    public void onTabSelected(TabLayout.Tab tab) {
        if (frtConnectivityReceiver.isConnected(frtMyTaskActivity)) {
            viewPager.setCurrentItem(tab.getPosition());
            int tabIconColor = ContextCompat.getColor(frtMyTaskActivity, R.color.colorPrimary);
            if (tab.getIcon() != null)
                tab.getIcon().setColorFilter(tabIconColor, PorterDuff.Mode.SRC_IN);
        } else {
            frtUtility.setSnackBar(getString(R.string.nointernet), ivback);
        }
    }

    @Override
    public void onTabUnselected(TabLayout.Tab tab) {
        int tabIconColor = ContextCompat.getColor(frtMyTaskActivity, android.R.color.white);
        if (tab.getIcon() != null)
            tab.getIcon().setColorFilter(tabIconColor, PorterDuff.Mode.SRC_IN);
    }

    @Override
    public void onTabReselected(TabLayout.Tab tab) {

    }

    @Override
    protected void onResume() {
        super.onResume();
        if (!inOncreate)
            setUpView();
    }

    private void setUpView() {
        assignedCount = 0;
        pendingCount = 0;
        inProgressCount = 0;
        closedCount = 0;
        flagnet = false;
        tabLayout.removeAllTabs();
        getTaskDetail();
    }

    @Override
    protected void onPause() {
        super.onPause();
        inOncreate = false;
    }

    @Override
    protected void onStart() {
        super.onStart();
        broadcastReceiver = broadcasting.getBroadcasting();
        registerReceiver(broadcastReceiver, new IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION));
    }

    @Override
    protected void onStop() {
        super.onStop();
        unregisterReceiver(broadcastReceiver);
    }

    @Override
    public void getBroadcast(boolean isBroadcasting) {
        if (isBroadcasting) {
            frtUtility.setSnackBar(getString(R.string.nointernet), ivback);
            frtUtility.dialogHide();
            flagnet = true;
        } else {
            if (flagnet) {
                setUpView();
            }
        }
    }

    private void selectPage(int pageIndex) {
        tabLayout.setScrollPosition(pageIndex, 0f, true);
        viewPager.setCurrentItem(pageIndex);
    }
}

package com.vodafone.frt.activities;

import android.content.BroadcastReceiver;
import android.content.Intent;
import android.content.IntentFilter;
import android.net.ConnectivityManager;
import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.view.View;
import android.widget.LinearLayout;
import android.widget.ListView;

import com.vodafone.frt.R;
import com.vodafone.frt.adapters.FRTTrackPatrollerRouteAdapter;
import com.vodafone.frt.apis.FRTAsyncCommon;
import com.vodafone.frt.apis.FRTWEBAPI;
import com.vodafone.frt.callbacks.FRTCallBackForIdFind;
import com.vodafone.frt.callbacks.FRTCallBackInitViews;
import com.vodafone.frt.callbacks.FRTCallBackSetListeners;
import com.vodafone.frt.enums.FRTAPIType;
import com.vodafone.frt.fonts.FRTTextviewTrebuchetMS;
import com.vodafone.frt.models.FRTRequestTrackPatrollerModel;
import com.vodafone.frt.models.FRTResponseTrackPatrollerModel;
import com.vodafone.frt.network.FRTConnectivityReceiver;
import com.vodafone.frt.preferences.FRTSharePrefUtil;
import com.vodafone.frt.utility.FRTBroadcasting;
import com.vodafone.frt.utility.FRTUtility;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.List;

public class FRTTrackPatrollerActivity extends AppCompatActivity implements FRTCallBackInitViews, FRTCallBackForIdFind, FRTCallBackSetListeners
        , FRTAsyncCommon.FetchDataCallBack, FRTBroadcasting.CallBackBroadcast, FRTTrackPatrollerRouteAdapter.SelectionViewAttendanceListener {
    private BroadcastReceiver broadcastReceiver;
    private FRTTrackPatrollerRouteAdapter adapter;
    private FRTBroadcasting broadcasting;
    private final FRTTrackPatrollerActivity frtTrackPatrollerActivity = this;
    private FRTCallBackForIdFind frtCallBackForIdFind;
    private FRTConnectivityReceiver frtConnectivityReceiver;
    private FRTUtility frtUtility;
    private FRTTrackPatrollerRouteAdapter.SelectionViewAttendanceListener frtSelectionViewAttendanceListener;
    private LinearLayout ivback;
    private ListView attendanceListView;
    private List<FRTResponseTrackPatrollerModel> modelList;
    private FRTTextviewTrebuchetMS title;
    private FRTWEBAPI frtwebapi;
    private FRTSharePrefUtil frtSharePrefUtil;
    private FRTTextviewTrebuchetMS norecord, loader;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        //noinspection ConstantConditions
        getSupportActionBar().hide();
        setContentView(R.layout.activity_frttrack_patroller);
        callBackSetUp();
    }

    /**
     * This method initialize the callback and objects
     */
    private void callBackSetUp() {
        FRTCallBackInitViews frtCallBackInitViews = frtTrackPatrollerActivity;
        frtCallBackForIdFind = frtTrackPatrollerActivity;
        FRTCallBackSetListeners frtCallBackSetListeners = frtTrackPatrollerActivity;
        frtCallBackInitViews.initAllViews();
        frtCallBackSetListeners.commonListeners();
    }

    @Override
    public void initAllViews() {
        ivback = (LinearLayout) frtCallBackForIdFind.view(R.id.ivback);
        attendanceListView = (ListView) frtCallBackForIdFind.view(R.id.frtscheduledrouteListView);
        title = (FRTTextviewTrebuchetMS) frtCallBackForIdFind.view(R.id.title);
        norecord = (FRTTextviewTrebuchetMS) frtCallBackForIdFind.view(R.id.norecord);
        loader = (FRTTextviewTrebuchetMS) frtCallBackForIdFind.view(R.id.loader);
        frtUtility = FRTUtility.getUtilityInstance();
        frtUtility.setContext(frtTrackPatrollerActivity);
        frtUtility.settingStatusBarColor(frtTrackPatrollerActivity, R.color.colorPrimary);
        frtConnectivityReceiver = new FRTConnectivityReceiver();
        broadcasting = FRTBroadcasting.getBroadcastingInstance();
        broadcasting.setContext(frtTrackPatrollerActivity);
        broadcasting.setCallbackBroadcast(frtTrackPatrollerActivity);
        adapter = new FRTTrackPatrollerRouteAdapter(frtTrackPatrollerActivity);
        frtwebapi = new FRTWEBAPI();
        frtSharePrefUtil = FRTSharePrefUtil.getInstance(frtTrackPatrollerActivity);
        frtSelectionViewAttendanceListener = frtTrackPatrollerActivity;
        getSceduleRoute();


    }

    //code by Ashutosh
    @SuppressWarnings("deprecation")
    private void getSceduleRoute() {
        @SuppressWarnings("unchecked") FRTAsyncCommon<FRTRequestTrackPatrollerModel> frtAsyncCommon = FRTAsyncCommon.getAsyncInstance();
        frtAsyncCommon.setFrtModel(setUpSubordinateModel());
        frtAsyncCommon.setContext(frtTrackPatrollerActivity);
        frtAsyncCommon.execute(frtwebapi.getWEBAPI(FRTAPIType.GETSUBORDINATEDETAILS), "getsubordinate");
        frtAsyncCommon.setFetchDataCallBack(frtTrackPatrollerActivity);
    }

    private FRTRequestTrackPatrollerModel setUpSubordinateModel() {
        FRTRequestTrackPatrollerModel cqRequestTrackPatrollerModel = new FRTRequestTrackPatrollerModel();
        try {
            cqRequestTrackPatrollerModel.setUserId(Integer.parseInt(frtSharePrefUtil.getString(getString(R.string.userkey))));
        } catch (Exception e) {
        }
        return cqRequestTrackPatrollerModel;
    }

    @Override
    public void getAsyncData(String response, String type) {
        if (response != null) {
            modelList = new ArrayList<>();
            try {
                JSONObject jsonObject = new JSONObject(response);
                JSONArray jo = new JSONArray(String.valueOf(jsonObject.optJSONArray("results")));
                for (int i = 0; i < jo.length(); i++) {
                    if (jsonObject.optString(getString(R.string.status_key)).equalsIgnoreCase("OK")) {
                        FRTResponseTrackPatrollerModel frtResponseTrackPatrollerModel = new FRTResponseTrackPatrollerModel();
                        frtResponseTrackPatrollerModel.setUser_id(jo.optJSONObject(i).optInt("user_id"));
                        frtResponseTrackPatrollerModel.setUser_name(jo.optJSONObject(i).optString("user_name"));
                        frtResponseTrackPatrollerModel.setFull_name(jo.optJSONObject(i).optString("full_name"));
                        frtResponseTrackPatrollerModel.setEmail_id(jo.optJSONObject(i).optString("email_id"));
                        frtResponseTrackPatrollerModel.setManager_id(jo.optJSONObject(i).optInt("manager_id"));
                        frtResponseTrackPatrollerModel.setManager_name(jo.optJSONObject(i).optString("manager_name"));
                        frtResponseTrackPatrollerModel.setUser_img(jo.optJSONObject(i).optString("user_img"));
                        frtResponseTrackPatrollerModel.setRole_id(jo.optJSONObject(i).optInt("role_id"));
                        frtResponseTrackPatrollerModel.setPhone(jo.optJSONObject(i).optString("phone"));
                        frtResponseTrackPatrollerModel.setRole_name(jo.optJSONObject(i).optString("role_name"));
                        frtResponseTrackPatrollerModel.setCreatedBy(jo.optJSONObject(i).optString("createdBy"));
                        frtResponseTrackPatrollerModel.setModifiedBy(jo.optJSONObject(i).optString("modifiedBy"));
                        frtResponseTrackPatrollerModel.setIs_active(jo.optJSONObject(i).optString("is_active"));
                        frtResponseTrackPatrollerModel.setCreated_on(jo.optJSONObject(i).optString("created_on"));
                        frtResponseTrackPatrollerModel.setModified_on(jo.optJSONObject(i).optString("modified_on"));
                        modelList.add(frtResponseTrackPatrollerModel);
                    } else if (jsonObject.optString(getString(R.string.status_key)).equals(getString(R.string.req_denied))) {
                        frtUtility.goToLogin(getString(R.string.req_denied));
                    } else if (jsonObject.optString(getString(R.string.status_key)).equals(getString(R.string.session_exp))) {
                        frtUtility.goToLogin(getString(R.string.session_exp));
                    } else {
                        frtUtility.setSnackBar(jsonObject.optString(getString(R.string.error_message_key)), attendanceListView);
                    }
                }
                if (jsonObject.optString("status").equals("OK") && modelList.size() > 0) {
                    norecord.setVisibility(View.GONE);
                    attendanceListView.setVisibility(View.VISIBLE);
                } else {
                    norecord.setVisibility(View.VISIBLE);
                    attendanceListView.setVisibility(View.GONE);
                }
                loader.setVisibility(View.GONE);
            } catch (JSONException e) {
            }
            setAdapter();
            setItemCount();
        } else {
            frtUtility.setSnackBar(getString(R.string.userpasserror), attendanceListView);
        }
    }

    private void setItemCount() {
        if (modelList != null)
            title.setText(getString(R.string.patrollerlist));
    }

    @Override
    public View view(int id) {
        return findViewById(id);
    }

    @Override
    public void commonListeners() {
        ivback.setOnClickListener(frtBackClick);
    }


    private final View.OnClickListener frtBackClick = new View.OnClickListener() {
        @Override
        public void onClick(View view) {
            onBackPressed();
        }
    };

    @Override
    public void onBackPressed() {
        if (frtConnectivityReceiver.isConnected(frtTrackPatrollerActivity)) {
            super.onBackPressed();
//            frtUtility.stopHandler(handler);
            Intent intent = new Intent(frtTrackPatrollerActivity, FRTNavigationScreenActivity.class);
            startActivity(intent);
            overridePendingTransition(R.anim.slide_in_from_left, R.anim.slide_out_right);
        } else {
            frtUtility.setSnackBar(getString(R.string.nointernet), findViewById(R.id.header));
        }
    }

    private void setAdapter() {
        adapter.setDataSet(modelList);
        adapter.setSelectionListener(frtTrackPatrollerActivity);
        adapter.notifyDataSetChanged();
        attendanceListView.setAdapter(adapter);
    }


    @Override
    protected void onResume() {
        super.onResume();
    }

    @Override
    protected void onPause() {
        super.onPause();
    }

    @Override
    protected void onStart() {
        super.onStart();
        broadcastReceiver = broadcasting.getBroadcasting();
        registerReceiver(broadcastReceiver, new IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION));
    }

    @Override
    protected void onStop() {
        super.onStop();
        unregisterReceiver(broadcastReceiver);
    }

    @Override
    public void getBroadcast(boolean isBroadcasting) {
        if (isBroadcasting) {
            frtUtility.setSnackBar(getString(R.string.nointernet), ivback);
            frtUtility.hideDialog();
        } else {
            getSceduleRoute();
        }
    }

    @Override
    public void onClickItem(int position) {
        Intent intent = new Intent(frtTrackPatrollerActivity, FRTRouteControllerTaskActivity.class);
        intent.putExtra("case", "PatrollerLocation");
        intent.putExtra("userid", modelList.get(position).getUser_id());
        startActivity(intent);
        overridePendingTransition(R.anim.enter_anim, R.anim.exit_anim);
    }

}

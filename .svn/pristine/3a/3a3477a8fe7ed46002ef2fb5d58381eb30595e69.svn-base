package com.vodafone.frt.utility;

import android.Manifest;
import android.annotation.SuppressLint;
import android.annotation.TargetApi;
import android.app.Activity;
import android.app.Dialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.graphics.drawable.ColorDrawable;
import android.location.GnssStatus;
import android.location.GpsStatus;
import android.location.LocationManager;
import android.media.ExifInterface;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.os.AsyncTask;
import android.os.BatteryManager;
import android.os.Build;
import android.os.Environment;
import android.os.Handler;
import android.os.Looper;
import android.provider.MediaStore;
import android.provider.Settings;
import android.support.design.widget.Snackbar;
import android.support.v4.app.ActivityCompat;
import android.support.v4.content.ContextCompat;
import android.support.v7.app.AlertDialog;
import android.telephony.TelephonyManager;
import android.text.TextUtils;
import android.util.Base64;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.Display;
import android.view.Gravity;
import android.view.View;
import android.view.Window;
import android.view.WindowManager;
import android.view.inputmethod.InputMethodManager;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.widget.EditText;

import com.google.android.gms.maps.CameraUpdate;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.LatLngBounds;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.gms.maps.model.PolylineOptions;
import com.squareup.okhttp.MediaType;
import com.squareup.okhttp.OkHttpClient;
import com.squareup.okhttp.Request;
import com.squareup.okhttp.RequestBody;
import com.squareup.okhttp.Response;
import com.vodafone.frt.BuildConfig;
import com.vodafone.frt.R;
import com.vodafone.frt.activities.FRTLoginActivity;
import com.vodafone.frt.apis.FRTAsyncCommon;
import com.vodafone.frt.apis.FRTWEBAPI;
import com.vodafone.frt.app.FRTApp;
import com.vodafone.frt.constants.FRTConstants;
import com.vodafone.frt.db.FRTLocationDb;
import com.vodafone.frt.enums.FRTAPIType;
import com.vodafone.frt.models.FRTLoginRefreshRequestModel;
import com.vodafone.frt.models.FRTRequestActualRouteModel;
import com.vodafone.frt.models.FRTRequestAttendanceModel;
import com.vodafone.frt.models.FRTRequestGetHaltPointsModel;
import com.vodafone.frt.models.FRTRequestGetPtrollerLocationModel;
import com.vodafone.frt.models.FRTRequestModelLogin;
import com.vodafone.frt.models.FRTRequestModelLogout;
import com.vodafone.frt.models.FRTRequestMyTaskModel;
import com.vodafone.frt.models.FRTRequestPauseReasonModel;
import com.vodafone.frt.models.FRTRequestPlannedRouteModel;
import com.vodafone.frt.models.FRTRequestSaveHaltPointsModel;
import com.vodafone.frt.models.FRTRequestSaveRouteAction;
import com.vodafone.frt.models.FRTRequestSaveRouteLocationmodel;
import com.vodafone.frt.models.FRTRequestSaveWeatherModel;
import com.vodafone.frt.models.FRTRequestScheduleRouteModel;
import com.vodafone.frt.models.FRTRequestSelfieDataModel;
import com.vodafone.frt.models.FRTRequestTrackPatrollerModel;
import com.vodafone.frt.models.FRTRequestUploadRouteTrackingDocModel;
import com.vodafone.frt.models.FRTRequestUserDetailModel;
import com.vodafone.frt.models.FRTResponseActualRouteModel;
import com.vodafone.frt.models.FRTResponseGetHaltPointsModel;
import com.vodafone.frt.models.FRTResponsePlannedRouteModel;
import com.vodafone.frt.network.FRTConnectivityReceiver;
import com.vodafone.frt.preferences.FRTSharePrefUtil;
import com.vodafone.frt.services.FRTLocationTrackingService;

import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.RandomAccessFile;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.concurrent.TimeUnit;

import io.nlopez.smartlocation.SmartLocation;

/**
 * Created by vishal on 16/11/17
 */
public class FRTUtility<T> {
    @SuppressLint("StaticFieldLeak")
    private static final FRTUtility frtUtility = new FRTUtility();
    private static final MediaType JSON
            = MediaType.parse("application/json; charset=utf-8");
    private final OkHttpClient client = new OkHttpClient();
    StringBuilder stringBuilder;
    private boolean checkList = false;
    private Context context;
    //    private String googleDirectionsApiResponse;
    private FRTSharePrefUtil frtSharePrefUtil;
    private FRTConstants frtConstants;
    private FRTApp frtApp;
    private GoogleMap googleMap;
    private int routeColor;
    private List<T> latlnglist;
    @SuppressWarnings("deprecation")
    private ProgressDialog progressDialog;
    private LatLngBounds.Builder b;
    private LatLngBounds bounds;
    private boolean isOneTime;

    private FRTUtility() {
    }

    public static FRTUtility getUtilityInstance() {
        return frtUtility != null ? frtUtility : new FRTUtility();
    }

//    public Stack<Fragment> changeFragmentWithPush(Fragment fragment, FragmentManager fragmentManager, Stack<Fragment> mFragmentStack, View view) {
//        mFragmentStack.push(fragment);
//        FragmentTransaction ft = fragmentManager.beginTransaction();
//        ft.setCustomAnimations(R.anim.enter_anim, R.anim.exit_anim);
//        ft.replace(view.getId(), fragment);
//        ft.addToBackStack(null);
//        ft.commit();
//        return mFragmentStack;
//    }
//
//    public void changeFragmentWithPop(Fragment fragment, FragmentManager fragmentManager, View view) {
//        FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();
//        fragmentTransaction.setCustomAnimations(R.anim.slide_in_from_left, R.anim.slide_out_right);
//        fragmentTransaction.replace(view.getId(), fragment);
//        fragmentTransaction.addToBackStack(null);
//        fragmentTransaction.commit();
//    }

    public void setLatLngList(List<T> latLngList, boolean checkLists) {
        this.latlnglist = latLngList;
        checkList = checkLists;
    }

    public void setContext(Context ctx) {
        try {
            context = ctx;
            frtApp = (FRTApp) ((Activity) context).getApplication();
            frtConstants = new FRTConstants();
        } catch (Exception ignored) {
        }
    }

    /**
     * Sets messages according to user actions
     *
     * @param message meesage to show
     * @param view    view instance
     */
    public void setSnackBar(String message, View view) {
        Snackbar snackbar = Snackbar.make(view, message, Snackbar.LENGTH_LONG);
        View sbView = snackbar.getView();
        sbView.setBackgroundColor(ContextCompat.getColor(context, R.color.snackbargreen));
        snackbar.show();
    }

    /**
     * checking mobile gps
     *
     * @param activity activity
     */
    @SuppressWarnings("deprecation")
    public void checkGps(Activity activity) {
        // Check Location (API dependant)
        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.KITKAT) {
            String provider = null;
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.CUPCAKE) {
                provider = Settings.Secure.getString(context.getContentResolver(), Settings.Secure.LOCATION_PROVIDERS_ALLOWED);
            }
            assert provider != null;
            if (!(provider.contains(context.getString(R.string.gpsprovider)) && provider.contains(context.getString(R.string.networkprovider)))) {
                showLocationDialog(activity);
            }
        } else {
            int mode;
            try {
                mode = Settings.Secure.getInt(context.getContentResolver(), Settings.Secure.LOCATION_MODE);
            } catch (Settings.SettingNotFoundException e) {
                mode = Settings.Secure.LOCATION_MODE_OFF;
            }
            if (mode != Settings.Secure.LOCATION_MODE_HIGH_ACCURACY) {
                showLocationDialog(activity);
            }
        }
    }

    public boolean isGpsEnabled() {
        return (SmartLocation.with(context).location().state().locationServicesEnabled() &&
                SmartLocation.with(context).location().state().isAnyProviderAvailable());
    }

    /**
     * showing location dialog when gps off
     *
     * @param ctx activity context
     */
    public void showLocationDialog(final Activity ctx) {
        AlertDialog.Builder builder = new AlertDialog.Builder(ctx);
        builder.setMessage(R.string.ASLocationMessage);
        builder.setNegativeButton(R.string.cancel, new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int id) {
                ctx.finish();
            }
        });
        builder.setPositiveButton(R.string.ok, new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int id) {
                ctx.startActivity(new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS));
            }
        });
        builder.setCancelable(false);
        builder.create().show();
    }

    //ashutosh
    public double getShortestDeviationpath(List<FRTResponsePlannedRouteModel> plannedRouteList, LatLng currentLoaction) {

        ArrayList<Double> list = new ArrayList<>();
        for (int i = 0; i < plannedRouteList.size() - 1; i++) {
            list.add(calculationByDistance(new LatLng(plannedRouteList.get(i).getLat(), plannedRouteList.get(i).getLng()), currentLoaction));
        }
        return Collections.min(list);
    }

    /**
     * Login name value pair composition
     *
     * @param params               name-value pair list instance
     * @param frtRequestModelLogin login model instance
     * @return name-value pair list
     */
    @SuppressWarnings("deprecation")
    private List<NameValuePair> prepareDataLogin(List<NameValuePair> params, FRTRequestModelLogin frtRequestModelLogin) {
        BasicNameValuePair basicNameValuePair = new BasicNameValuePair("username", frtRequestModelLogin.getUsername());
        params.add(basicNameValuePair);
        BasicNameValuePair basicNameValuePair1 = new BasicNameValuePair("password", frtRequestModelLogin.getPassword());
        params.add(basicNameValuePair1);
        BasicNameValuePair basicNameValuePair2 = new BasicNameValuePair("grant_type", frtRequestModelLogin.getGrant_type());
        params.add(basicNameValuePair2);
        BasicNameValuePair basicNameValuePair3 = new BasicNameValuePair("osName", frtRequestModelLogin.getOsName());
        params.add(basicNameValuePair3);
        BasicNameValuePair basicNameValuePair4 = new BasicNameValuePair("osVersion", frtRequestModelLogin.getOsVersion());
        params.add(basicNameValuePair4);
        BasicNameValuePair basicNameValuePair5 = new BasicNameValuePair("macAddress", frtRequestModelLogin.getMacAddress());
        params.add(basicNameValuePair5);
        return params;
    }

    private JSONObject prepareSaveRouteAction(FRTRequestSaveRouteAction frtModel) {
        JSONObject jsonObject = new JSONObject();
        JSONObject jo = new JSONObject();
        JSONArray jsonArray = new JSONArray();
        try {
            jsonObject.put("assignedRouteId", frtModel.getAssignedRouteId());
            jsonObject.put("action", frtModel.getAction());
            jsonObject.put("latitude", frtModel.getLatitude());
            jsonObject.put("longitude", frtModel.getLongitude());
            jsonObject.put("mobileTime", frtModel.getMobileTime());
            jsonObject.put("reasonId", frtModel.getReasonId());
            jsonObject.put("remark", frtModel.getRemark());
//            List<Map<String, String>> mapList = frtModel.getBase64encodedstringList();
//            for (int i = 0; i < mapList.size(); i++) {
//                switch (i) {
//                    case 0:
//                        JSONObject jsonObject1 = new JSONObject();
//                        jsonObject1.put("imageData", mapList.get(i).get("image1"));
//                        jsonArray.put(jsonObject1);
//                        break;
//                    case 1:
//                        JSONObject jsonObject2 = new JSONObject();
//                        jsonObject2.put("imageData", mapList.get(i).get("image2"));
//                        jsonArray.put(jsonObject2);
//                        break;
//                    case 2:
//                        JSONObject jsonObject3 = new JSONObject();
//                        jsonObject3.put("imageData", mapList.get(i).get("image3"));
//                        jsonArray.put(jsonObject3);
//                        break;
//                    case 3:
//                        JSONObject jsonObject4 = new JSONObject();
//                        jsonObject4.put("imageData", mapList.get(i).get("image4"));
//                        jsonArray.put(jsonObject4);
//                        break;
//                    default:
//                        break;
//                }
//            }
            for (String image :
                    frtModel.getBase64encodedstringList()) {
                JSONObject jsonObject1 = new JSONObject();
                jsonObject1.put("imageData", image);
                jsonArray.put(jsonObject1);
            }
            jsonObject.put("images", jsonArray);
            jo.put("data", jsonObject.toString());
        } catch (JSONException ignored) {
        }
        Log.d("REQUEST", jo.toString());
        return jo;
    }

    @SuppressWarnings("deprecation")
    private List<NameValuePair> prepareLoginRefreshTokenService(List<NameValuePair> params, FRTLoginRefreshRequestModel frtModel) {
        BasicNameValuePair basicNameValuePair = new BasicNameValuePair("refresh_token", frtModel.getRefresh_token());
        params.add(basicNameValuePair);
        BasicNameValuePair basicNameValuePair1 = new BasicNameValuePair("grant_type", frtModel.getGrant_type());
        params.add(basicNameValuePair1);
        return params;
    }

    private JSONObject prepareDataPauseReason(FRTRequestPauseReasonModel cqModel) {
        JSONObject jsonObject = new JSONObject();
        JSONObject jo = new JSONObject();
        try {
            jsonObject.put("reasonType", cqModel.getReasonType());
            jo.put("data", jsonObject.toString());
        } catch (JSONException ignored) {
        }
        Log.d("REQUEST", jo.toString());
        return jo;
    }

    private JSONObject prepareUserDetail(FRTRequestUserDetailModel cqModel) {
        JSONObject jsonObject = new JSONObject();
        JSONObject jo = new JSONObject();
        try {
            jsonObject.put("userName", cqModel.getUserName());
            jo.put("data", jsonObject.toString());
        } catch (JSONException ignored) {
        }
        Log.d("REQUEST", jo.toString());
        return jo;
    }

    private JSONObject prepareDataPlannedRoute(FRTRequestPlannedRouteModel cqModel) {
        JSONObject jsonObject = new JSONObject();
        JSONObject jo = new JSONObject();
        try {
            jsonObject.put("routeId", cqModel.getRouteId());
            jsonObject.put("routeRefId", cqModel.getRouteRefId());
            jo.put("data", jsonObject.toString());
        } catch (JSONException ignored) {
        }
        Log.d("REQUEST", jo.toString());
        return jo;
    }

    private JSONObject prepareAttendanceData(FRTRequestAttendanceModel cqModel) {
        JSONObject jsonObject = new JSONObject();
        JSONObject jo = new JSONObject();
        try {
            jsonObject.put("patrollerId", cqModel.getPatrollerId());
            jsonObject.put("fromDate", cqModel.getFromDate());
            jsonObject.put("toDate", cqModel.getToDate());
            jo.put("data", jsonObject.toString());
        } catch (JSONException ignored) {
        }
        Log.d("REQUEST", jo.toString());
        return jo;
    }

    private JSONObject prepareGetHaltPointsData(FRTRequestGetHaltPointsModel cqModel) {
        JSONObject jsonObject = new JSONObject();
        JSONObject jo = new JSONObject();
        try {
            jsonObject.put("routeId", cqModel.getRouteId());
            jsonObject.put("routeRefId", cqModel.getRouteRefId());
            jsonObject.put("routeAssignmentId", cqModel.getRouteAssignmentId());
            jo.put("data", jsonObject.toString());
        } catch (JSONException ignored) {
        }
        Log.d("REQUEST", jo.toString());
        return jo;
    }

    private JSONObject prepareSaveWeatherData(FRTRequestSaveWeatherModel cqModel) {
        JSONObject jsonObject = new JSONObject();
        JSONObject jo = new JSONObject();
        try {
            jsonObject.put("routeAssignmentId", cqModel.getRouteAssignmentId());
            jsonObject.put("userId", cqModel.getUserId());
            jsonObject.put("latitude", cqModel.getLatitude());
            jsonObject.put("longitude", cqModel.getLongitude());
            jsonObject.put("mobileTime", cqModel.getMobileTime());
            jsonObject.put("humidity", cqModel.getHumidity());
            jsonObject.put("temperature", cqModel.getTemperature());
            jsonObject.put("precipitation", cqModel.getPrecipitation());
            jo.put("data", jsonObject.toString());
        } catch (JSONException ignored) {
        } catch (Exception OutOfMemoryError) {
            setSnackBar(context.getString(R.string.maxUploadDocumentSize), ((Activity) context).findViewById(android.R.id.content));
        }
        Log.d("REQUEST", jo.toString());
        return jo;
    }

    private JSONObject prepareUploadDocData(FRTRequestUploadRouteTrackingDocModel cqModel) {
        JSONObject jsonObject = new JSONObject();
        JSONObject jo = new JSONObject();
        try {
            jsonObject.put("routeAssignmentId", cqModel.getRouteAssignmentId());
            jsonObject.put("fileName", cqModel.getFileName());
            jsonObject.put("latitude", cqModel.getLatitude());
            jsonObject.put("longitude", cqModel.getLongitude());
            jsonObject.put("mobileTime", cqModel.getMobileTime());
            jsonObject.put("remarks", cqModel.getRemarks());
            jsonObject.put("fileData", cqModel.getFileData());
            jo.put("data", jsonObject.toString());
        } catch (JSONException ignored) {
        } catch (Exception OutOfMemoryError) {
            setSnackBar(context.getString(R.string.maxUploadDocumentSize), ((Activity) context).findViewById(android.R.id.content));
        }
        Log.d("REQUEST", jo.toString());
        return jo;
    }

    private JSONObject prepareSaveHaltRoute(FRTRequestSaveHaltPointsModel frtModel) {
        JSONObject jsonObject = new JSONObject();
        JSONObject jo = new JSONObject();
        JSONArray jsonArray = new JSONArray();
        try {
            jsonObject.put("assignedRouteId", frtModel.getRouteAssignmentId());
            jsonObject.put("action", frtModel.getAction());
            jsonObject.put("latitude", frtModel.getLatitude());
            jsonObject.put("longitude", frtModel.getLongitude());
            jsonObject.put("mobileTime", frtModel.getDateTime());
            jsonObject.put("userId", frtModel.getUserId());
            jsonObject.put("remark", frtModel.getRemark());
            jsonObject.put("haltTrackingId", frtModel.getHaltTrackingId());
            JSONArray jsonArray1 = new JSONArray();
            for (String image : frtModel.getImages()) {
                JSONObject jsonObject1 = new JSONObject();
                jsonObject1.put("imageData", image);
                jsonArray1.put(jsonObject1);
            }
            jsonObject.put("images", jsonArray1);
            jo.put("data", jsonObject.toString());
        } catch (JSONException ignored) {
        }
        Log.d("REQUEST", jo.toString());
        frtUtility.logInfo(context, "Request haltpoint checkin/checkout" +jo, frtConstants);
        return jo;
    }

    private JSONObject prepareSubordinateData(FRTRequestTrackPatrollerModel cqModel) {
        JSONObject jsonObject = new JSONObject();
        JSONObject jo = new JSONObject();
        try {
            jsonObject.put("userId", cqModel.getUserId());
            jsonObject.put("roleName", cqModel.getRoleName());
            jo.put("data", jsonObject.toString());
        } catch (JSONException ignored) {
        }
        Log.d("REQUEST", jo.toString());
        return jo;
    }

    private JSONObject prepareScheduledRouteData(FRTRequestScheduleRouteModel cqModel) {
        JSONObject jsonObject = new JSONObject();
        JSONObject jo = new JSONObject();
        try {
            jsonObject.put("userId", cqModel.getuserId());
            jo.put("data", jsonObject.toString());
        } catch (JSONException ignored) {
        }
        Log.d("REQUEST", jo.toString());
        return jo;
    }

    private JSONObject prepareDataActualRoute(FRTRequestActualRouteModel cqModel) {
        JSONObject jsonObject = new JSONObject();
        JSONObject jo = new JSONObject();
        try {
            jsonObject.put("routeAssignmentId", cqModel.getRouteAssignmentId());
            jo.put("data", jsonObject.toString());
        } catch (JSONException ignored) {
        }
        Log.d("REQUEST", jo.toString());
        return jo;
    }

    private JSONObject prepareDatalLogout(FRTRequestModelLogout cqModel) {
        JSONObject jsonObject = new JSONObject();
        JSONObject jo = new JSONObject();
        try {
            jsonObject.put("userId", cqModel.getUserId());
            jo.put("data", jsonObject.toString());
        } catch (JSONException ignored) {
        }
        Log.d("REQUEST", jo.toString());
        return jo;
    }

    private JSONObject prepareDataTaskDetail(FRTRequestMyTaskModel cqModel) {
        JSONObject jsonObject = new JSONObject();
        JSONObject jo = new JSONObject();
        try {
            jsonObject.put("userId", cqModel.getUserId());
            jo.put("data", jsonObject.toString());
        } catch (JSONException ignored) {
        }
        Log.d("REQUEST", jo.toString());
        return jo;
    }

    private JSONObject prepareDataSaveRouteLocation(FRTRequestSaveRouteLocationmodel cqModel) {
        JSONObject jsonObject = new JSONObject();
        JSONObject jo = new JSONObject();
        try {
            jsonObject.put("userId", cqModel.getUserId());
            jsonObject.put("routeAssignmentId", cqModel.getRouteAssignmentId());
            jsonObject.put("latitude", cqModel.getLatitude());
            jsonObject.put("longitude", cqModel.getLongitude());
            jsonObject.put("batteryPercentage", cqModel.getBatteryPercentage());
            jsonObject.put("deviationFromPlanned", cqModel.getDeviationFromPlanned());
            jsonObject.put("distFromLastLoc", cqModel.getDistFromLastLoc());
            jsonObject.put("drivingSpeed", cqModel.getDrivingSpeed());
            jsonObject.put("mobileTime", cqModel.getMobileTime());
            jsonObject.put("networkProvider", cqModel.getNetworkProvider());
            jsonObject.put("isInsideBuffer", cqModel.getIsInsideBuffer());
            jo.put("data", jsonObject.toString());
        } catch (JSONException ignored) {
        }
        Log.d("REQUEST", jo.toString());
        return jo;
    }

    private JSONObject prepareDataPatrollerCurrentLocation(FRTRequestGetPtrollerLocationModel cqModel) {
        JSONObject jsonObject = new JSONObject();
        JSONObject jo = new JSONObject();
        try {
            jsonObject.put("userId", cqModel.getUserid());
            jo.put("data", jsonObject.toString());
        } catch (JSONException ignored) {
        }
        Log.d("REQUEST", jo.toString());
        return jo;
    }

    private JSONObject prepareDataBulkTrackLocation(List<FRTRequestSaveRouteLocationmodel> cqModelList) {
        JSONObject jsonObject = new JSONObject();
        JSONObject jo = new JSONObject();
        JSONArray jsonArray = new JSONArray();
        JSONObject jsonObject1 = new JSONObject();
        try {
            for (int i = 0; i < cqModelList.size(); i++) {
                FRTRequestSaveRouteLocationmodel frtRequestSaveRouteLocationmodel = cqModelList.get(i);
                String json = frtRequestSaveRouteLocationmodel.getJsontoupload();
                // TODO: parse JSON
                // TODO: set Sequence number
                // TODO: create json again
                JSONObject jsonObject2 = new JSONObject(json);
                jsonObject2.put("seqId", "" + frtRequestSaveRouteLocationmodel.getSeqId());
                jsonArray.put(jsonObject2);
            }
            jsonObject.put("trackingData", jsonArray);
            jo.put("data", jsonObject.toString());
        } catch (JSONException ignored) {
        }
        Log.d("REQUEST", jo.toString());
        return jo;
    }

    private JSONObject prepareGetSelfieData(FRTRequestSelfieDataModel cqModel) {
        JSONObject jsonObject = new JSONObject();
        JSONObject jo = new JSONObject();
        try {
            jsonObject.put("routeAssignmentId", cqModel.getRouteAssignmentId());
            jsonObject.put("action", cqModel.getAction());
            jsonObject.put("latitude", cqModel.getLatitude());
            jsonObject.put("longitude", cqModel.getLongitude());
            jsonObject.put("mobileTime", cqModel.getMobileTime());
            jsonObject.put("remarks", cqModel.getRemarks());
            jsonObject.put("imageData", cqModel.getImageData());
            jo.put("data", jsonObject.toString());
        } catch (JSONException ignored) {
        }
        Log.d("REQUEST", jo.toString());
        return jo;
    }

    @SuppressWarnings("deprecation")
    public <T> Object prepareData(String action, Object cqModel, List<NameValuePair> params, T frtRequestSaveRouteLocationmodelList, String url) {
        String response = null;
        switch (action) {
            case "login":
                prepareDataLogin(params, (FRTRequestModelLogin) cqModel);
                break;
            case "loginrefresh":
                prepareLoginRefreshTokenService(params, (FRTLoginRefreshRequestModel) cqModel);
                break;
            case "saverouteaction":
                response = doPostRequest(url, prepareSaveRouteAction((FRTRequestSaveRouteAction) cqModel), action);
                break;
            case "getreasondetail":
                response = doPostRequest(url, prepareDataPauseReason((FRTRequestPauseReasonModel) cqModel), action);
                break;
            case "getuserdetail":
                response = doPostRequest(url, prepareUserDetail((FRTRequestUserDetailModel) cqModel), action);
                break;
            case "getplannedroute":
                response = doPostRequest(url, prepareDataPlannedRoute((FRTRequestPlannedRouteModel) cqModel), action);
                break;
            case "getactualroute":
                response = doPostRequest(url, prepareDataActualRoute((FRTRequestActualRouteModel) cqModel), action);
                break;
            case "gettaskdetail":
                response = doPostRequest(url, prepareDataTaskDetail((FRTRequestMyTaskModel) cqModel), action);
                break;
            case "saveroute":
                response = doPostRequest(url, prepareDataSaveRouteLocation((FRTRequestSaveRouteLocationmodel) cqModel), action);
                break;
            case "getAttendance":
                response = doPostRequest(url, prepareAttendanceData((FRTRequestAttendanceModel) cqModel), action);
                break;
            case "getscheduledroute":
                response = doPostRequest(url, prepareScheduledRouteData((FRTRequestScheduleRouteModel) cqModel), action);
                break;
            case "logout":
                response = doPostRequest(url, prepareDatalLogout((FRTRequestModelLogout) cqModel), action);
                break;
            case "snaptoroadgoogle":
                response = doPostRequest(url, null, action);
                break;
            case "getsubordinate":
                response = doPostRequest(url, prepareSubordinateData((FRTRequestTrackPatrollerModel) cqModel), action);
                break;
            case "getcurrentlocation":
                response = doPostRequest(url, prepareDataPatrollerCurrentLocation((FRTRequestGetPtrollerLocationModel) cqModel), action);
                break;
            case "saveroutebulk":
                response = doPostRequest(url, prepareDataBulkTrackLocation((List<FRTRequestSaveRouteLocationmodel>) frtRequestSaveRouteLocationmodelList), action);
                break;
            case "getHaltPoints":
                response = doPostRequest(url, prepareGetHaltPointsData((FRTRequestGetHaltPointsModel) cqModel), action);
                break;
            case "sendselfiedata":
                response = doPostRequest(url, prepareGetSelfieData((FRTRequestSelfieDataModel) cqModel), action);
                break;
            case "saveHaltPoints":
                response = doPostRequest(url, prepareSaveHaltRoute((FRTRequestSaveHaltPointsModel) cqModel), action);
                break;
            case "UploadDoc":
                response = doPostRequest(url, prepareUploadDocData((FRTRequestUploadRouteTrackingDocModel) cqModel), action);
                break;
            case "SaveWeather":
                response = doPostRequest(url, prepareSaveWeatherData((FRTRequestSaveWeatherModel) cqModel), action);
                break;
        }
        if (action.equals("login") || action.equals("loginrefresh"))
            return action;
        else
            return response;
    }

    private String doPostRequest(String url, JSONObject jsonObject, String action) {
        frtSharePrefUtil = FRTSharePrefUtil.getInstance(context);
        client.setConnectTimeout(40, TimeUnit.SECONDS); // connect timeout
        client.setReadTimeout(40, TimeUnit.SECONDS);    // socket timeout
        Response response;
        String responses = null;
        Request request;
        try {
            if (!action.equals("snaptoroadgoogle")) {
                RequestBody body = RequestBody.create(JSON, String.valueOf(jsonObject));
                request = new Request.Builder()
                        .header("Authorization", "bearer" + " " + frtSharePrefUtil.getString(context.getString(R.string.token_key)))
                        .header("Content-Type", "application/json")
                        .url(url)
                        .post(body)
                        .build();
            } else {
                request = new Request.Builder()
                        .url(url)
                        .build();
            }
            response = client.newCall(request).execute();
            responses = response.body().string();
        } catch (Exception ignored) {
        }

        return responses;
    }

    /**
     * This method gave us the input query
     *
     * @param params name value pair list
     * @return the name value pair composite string
     * @throws UnsupportedEncodingException
     */
    @SuppressWarnings("deprecation")
    public String getQuery(List<NameValuePair> params) throws UnsupportedEncodingException {
        StringBuilder result = new StringBuilder();
        boolean first = true;
        for (NameValuePair pair : params) {
            if (first)
                first = false;
            else
                result.append("&");
            result.append(URLEncoder.encode(pair.getName(), "UTF-8"));
            result.append("=");
            result.append(URLEncoder.encode(pair.getValue(), "UTF-8"));
        }
        Log.d("REQUEST", result.toString());
        return result.toString();
    }

    /**
     * This method is used for showing dialog
     */
    @SuppressWarnings("deprecation")
    public void showDialog() {
        try {
            if (progressDialog == null) {
                progressDialog = new ProgressDialog(context);
                progressDialog.setMessage(context.getString(R.string.loaderttext));
                progressDialog.setCancelable(false);
                progressDialog.setCanceledOnTouchOutside(false);
                progressDialog.show();
            }
        } catch (Exception ignored) {
        }
    }

    /**
     * This method is used for hiding dialog
     */
    public void hideDialog() {
        try {
            if (progressDialog != null && progressDialog.isShowing()) {
                progressDialog.dismiss();
                progressDialog = null;
            }
        } catch (Exception ignored) {
        }
    }

    /**
     * Common Structure for dialog
     *
     * @param dialog   dialog instance
     * @param layoutid layout id
     */
    public Dialog dialogBasicStructure(Dialog dialog, int layoutid) {
        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
        dialog.setContentView(layoutid);
        if (dialog.getWindow() != null)
            dialog.getWindow().setBackgroundDrawable(new ColorDrawable((int) 0.9f));
        Window window = dialog.getWindow();
        WindowManager.LayoutParams param = window.getAttributes();
        param.gravity = Gravity.CENTER | Gravity.CENTER_VERTICAL;
        window.setLayout(WindowManager.LayoutParams.MATCH_PARENT,
                WindowManager.LayoutParams.MATCH_PARENT);
        window.getAttributes().windowAnimations = R.style.DialogAnimation_slideinout;
        dialog.setCanceledOnTouchOutside(false);
        return dialog;
    }

    /**
     * setting status bar color
     *
     * @param baseActivity actvity instance
     * @param color        color value
     */
    @SuppressWarnings("deprecation")
    public void settingStatusBarColor(Activity baseActivity, int color) {
        Window window = baseActivity.getWindow();
        if (Build.VERSION.SDK_INT >= 19)
            window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);
        // add FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS flag to the window
        if (Build.VERSION.SDK_INT >= 21)
            window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);
        // finally change the color
        if (Build.VERSION.SDK_INT >= 23)
            window.setStatusBarColor(baseActivity.getResources().getColor(color, null));
        else if (Build.VERSION.SDK_INT >= 21) {
            window.setStatusBarColor(baseActivity.getResources().getColor(color));
        }
    }

    /**
     * This method returns the sdk build version number
     *
     * @return build version number
     */
    public String getAppVersion() {
        PackageManager manager = context.getPackageManager();
        PackageInfo info = null;
        try {
            info = manager.getPackageInfo(context.getPackageName(), 0);
        } catch (PackageManager.NameNotFoundException ignored) {
        }
        assert info != null;
        String version = info.versionName;
        return "Version " + version + " (Beta)";
    }

    public void showSoftKeyboard(EditText edt, Context ctx) {
        InputMethodManager imm = (InputMethodManager) ctx.getSystemService(Context.INPUT_METHOD_SERVICE);
        edt.requestFocus();
        imm.showSoftInput(edt, 0);
    }

    public void hideSoftKeyboard(EditText edt, Context ctx) {
        InputMethodManager imm = (InputMethodManager) ctx.getSystemService(Context.INPUT_METHOD_SERVICE);
        imm.hideSoftInputFromWindow(edt.getWindowToken(), 0);
    }

//    public void removeMarkers(List<Marker> mMarkers) {
//        try {
//            if (mMarkers.size() > 0) {
//                for (Marker marker : mMarkers) {
//                    marker.remove();
//                }
//                mMarkers.clear();
//            }
//        } catch (Exception ignored) {
//        }
//    }

    public void exitApp() {
        try {
            Intent homeIntent = new Intent(Intent.ACTION_MAIN);
            homeIntent.addCategory(Intent.CATEGORY_HOME);
            homeIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
            context.startActivity(homeIntent);
        } catch (Exception ignored) {
        }
    }

//    public void setParametersForRoute(LatLng latLngSource, LatLng latLngDest) {
//        String url = getUrl(latLngSource, latLngDest);
//        Log.d("onMapClick", url);
//        boolean isGettingParametersToUpload = true;
//        try {
//            downloadUrl(url);
//        } catch (IOException ignored) {
//        }
//    }

    /**
     * Method will create a webview
     * <p>
     * //     * @param webgif webview instance
     * //     * @param url    url
     */
//    @SuppressLint("SetJavaScriptEnabled")
//    public WebView createWebView(WebView webgif, String url) {
//        if (Build.VERSION.SDK_INT >= 17)
//            webgif.getSettings().setJavaScriptEnabled(true);
//        webgif.getSettings().setUseWideViewPort(false);
//        Log.d("url", url);
//        webgif.setScrollContainer(false);
//        webgif.loadData(url, "text/html", "UTF-8");
//        MyWebClient myWebViewClient = new MyWebClient();
//        webgif.setWebViewClient(myWebViewClient);
//        return webgif;
//    }
    private GnssStatus.Callback getGpsCallbackOnNougatAndAbove() {
        GnssStatus.Callback locationGnssCallback = null;
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
            locationGnssCallback = new GnssStatus.Callback() {
                @Override
                public void onStarted() {
                    super.onStarted();
                }

                @Override
                public void onStopped() {
                    super.onStopped();
                    checkGps((Activity) context);
                }

                @Override
                public void onFirstFix(int ttffMillis) {
                    super.onFirstFix(ttffMillis);
                }

                @Override
                public void onSatelliteStatusChanged(GnssStatus status) {
                    super.onSatelliteStatusChanged(status);
                }
            };
        }
        return locationGnssCallback;
    }

    @SuppressWarnings("deprecation")
    private GpsStatus.Listener locationGpsListenerBelowNougat() {
        GpsStatus.Listener locationGpsListener = null;
        try {
            locationGpsListener = new GpsStatus.Listener() {
                @Override
                public void onGpsStatusChanged(int i) {
                    try {
                        if (i == GpsStatus.GPS_EVENT_STOPPED)
                            checkGps((Activity) context);
                    } catch (Exception ignored) {
                    }
                }
            };
        } catch (Exception ignored) {
        }
        return locationGpsListener;
    }

    @SuppressWarnings("deprecation")
    public void handleGps(LocationManager locationManager) {
        if (Build.VERSION.SDK_INT < 24) {
            if (ActivityCompat.checkSelfPermission(context, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
                // TODO: Consider calling
                //    ActivityCompat#requestPermissions
                // here to request the missing permissions, and then overriding
                //   public void onRequestPermissionsResult(int requestCode, String[] permissions,
                //                                          int[] grantResults)
                // to handle the case where the user grants the permission. See the documentation
                // for ActivityCompat#requestPermissions for more details.
                return;
            }
            locationManager.addGpsStatusListener(locationGpsListenerBelowNougat());
        } else
            locationManager.registerGnssStatusCallback(getGpsCallbackOnNougatAndAbove());
    }

    public boolean isLogoutStatus(String s) {
        if (s.equals(context.getString(R.string.req_denied))) {
            return true;
        } else if (s.equals(context.getString(R.string.session_exp))) {
            return true;
        }
        return false;
    }

    public void goToActivity(FRTLocationTrackingService frtLocationTrackingService, Class<T> frtActivitycls) {
        Intent intent = new Intent(frtLocationTrackingService, frtActivitycls);
        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        frtLocationTrackingService.startActivity(intent);
    }

    public void drawRoute(LatLng latLngSource, LatLng latLngDest, List<Marker> markers, int color, LatLng userCurrentLatLon, int startmarker, int endmarker) {
        routeColor = color;
        if (markers.size() > 0) {
            for (Marker marker : markers) {
                marker.remove();
            }
            markers.clear();
        }
        Marker startMarker = null, endMarker;
//        if (!isOneTime() && checkList)
        startMarker = googleMap.addMarker(new MarkerOptions().position(latLngSource).icon(BitmapDescriptorFactory.fromResource(startmarker)));
        endMarker = googleMap.addMarker(new MarkerOptions().position(latLngDest).icon(BitmapDescriptorFactory.fromResource(endmarker)));
        markers.add(startMarker);
        markers.add(endMarker);
        // Getting URL to the Google Directions API
        String url = getUrl(latLngSource, latLngDest);
        Log.d("routeurl", url);
        FetchUrl fetchUrl = new FetchUrl();
        // Start downloading json data from Google Directions API
        fetchUrl.execute(url);
        b = new LatLngBounds.Builder();
        b.include(userCurrentLatLon);
        if (checkList) {
            //noinspection unchecked
            for (FRTResponsePlannedRouteModel frtResponsePlannedRouteModel : (List<FRTResponsePlannedRouteModel>) latlnglist) {
                b.include(new LatLng(frtResponsePlannedRouteModel.getLat(), frtResponsePlannedRouteModel.getLng()));
            }
        } else {
            //noinspection unchecked
            for (FRTResponseActualRouteModel frtResponseActualRouteModel : (List<FRTResponseActualRouteModel>) latlnglist) {
                b.include(new LatLng(frtResponseActualRouteModel.getLat(), frtResponseActualRouteModel.getLng()));
            }
        }
        bounds = b.build();
        if (!frtApp.isOneTime()) {
            CameraUpdate cu = CameraUpdateFactory.newLatLngBounds(bounds, 40);
            googleMap.animateCamera(cu);
        }
    }

    /**
     * A method to download json data from url
     */
    private String downloadUrl(String strUrl) throws IOException {
        String data = "";
        InputStream iStream = null;
        HttpURLConnection urlConnection = null;
        //noinspection TryFinallyCanBeTryWithResources
        try {
            URL url = new URL(strUrl);
            // Creating an http connection to communicate with url
            urlConnection = (HttpURLConnection) url.openConnection();
            // Connecting to url
            urlConnection.connect();
            // Reading data from url
            iStream = urlConnection.getInputStream();
            BufferedReader br = new BufferedReader(new InputStreamReader(iStream));
            StringBuffer sb = new StringBuffer();
            String line;
            while ((line = br.readLine()) != null) {
                sb.append(line);
            }
            data = sb.toString();
            Log.d("downloadUrl", data);
            br.close();
        } catch (Exception ignored) {
            Log.e("tagdownloadurl", ignored.toString());
        } finally {
            try {
                assert iStream != null;
                iStream.close();
                assert urlConnection != null;
                urlConnection.disconnect();
            } catch (IOException ignored) {
            }
        }
        return data;
    }

    private String getUrl(LatLng origin, LatLng dest) {
        // Origin of route
        String str_origin = "origin=" + origin.latitude + "," + origin.longitude;
        // Destination of route
        String str_dest = "destination=" + dest.latitude + "," + dest.longitude;
        // Sensor enabled
        String sensor = "sensor=false";
        // Building the parameters to the web service
        String parameters = str_origin + "&" + str_dest + "&" + sensor;
        // Output format
        String output = "json";
        // Building the url to the web service
        String url = "https://maps.googleapis.com/maps/api/directions/" + output + "?" + parameters;
        return url;
    }

    public void setGoogleMap(GoogleMap gm) {
        googleMap = gm;
    }

    /**
     * This method returns the sdk build version number
     *
     * @return build version number
     */
    public String getSdkBuildVersionNumber() {
        int sdkVersion = Build.VERSION.SDK_INT;
        return sdkVersion + "";
    }

    /**
     * This method returns the Mac address
     *
     * @return build version number
     */
    public String getMacAddress() {
        WifiManager manager = (WifiManager) context.getSystemService(Context.WIFI_SERVICE);
        WifiInfo info = manager.getConnectionInfo();
        @SuppressLint("HardwareIds") String address = info.getMacAddress();
        return address;
    }

    public String getBase64FromString(String input) {
        byte[] data;
        String base64 = null;
        try {
            data = input.getBytes("UTF-8");
            base64 = Base64.encodeToString(data, Base64.DEFAULT);
        } catch (UnsupportedEncodingException e) {
            //  e.printStackTrace();
        }
        return base64;
    }

    @SuppressLint("SimpleDateFormat")
    public String getDateAndTime(Date d, boolean isUpload) {
        System.out.println("Start time => " + d.getTime());
        SimpleDateFormat df;
        if (isUpload)
            df = new SimpleDateFormat("dd-MMM-yy HH:mm:ss");
        else
            df = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");
        return df.format(d.getTime());
    }

    public String getLocationDate(long time) {
        SimpleDateFormat format = new SimpleDateFormat("dd-MMM-yy HH:mm:ss");
        return format.format(new Date(time));
    }

    public String getDateAndTime(boolean isUpload) {
        return getDateAndTime(Calendar.getInstance().getTime(), isUpload);
    }

    public String getNetworkProvider() {
        // Get System TELEPHONY service reference
        TelephonyManager tManager = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);
        // Get carrier name (Network Operator Name)
        return TextUtils.isEmpty(tManager.getNetworkOperatorName()) ? "" : tManager.getNetworkOperatorName();
    }

    public String getCurrentTime() {
        return String.valueOf(System.currentTimeMillis());
    }

    public void goToLogin(final String status) {
        try {
//            if (status.equals(context.getString(R.string.req_denied)))
//                setSnackBar(context.getString(R.string.reqdeniedmessage), ((Activity) context).findViewById(android.R.id.content));
//            else
//                setSnackBar(context.getString(R.string.sessionexpired), ((Activity) context).findViewById(android.R.id.content));
            new Handler().postDelayed(new Runnable() {
                @Override
                public void run() {
                    sendCodeForLoginActivityTransition(status);
                }
            }, frtConstants.KEY_SPLASH_TIME);
        } catch (Exception ignored) {
        }
    }

    private void sendCodeForLoginActivityTransition(String status) {
        try {
            if (status.equals(context.getString(R.string.req_denied)))
                startLoginActivity(context.getString(R.string.reqdeniedmessage));
            else
                startLoginActivity(context.getString(R.string.sessionexpired));
            clearPrerences();
        } catch (Exception ignored) {
        }
    }

    private void startLoginActivity(String message) {
        try {
            Intent intent = new Intent(context, FRTLoginActivity.class);
            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
            intent.putExtra("keyLogoutMesage", message);
            context.startActivity(intent);
            ((Activity) context).overridePendingTransition(R.anim.slide_in_from_left, R.anim.slide_out_right);
        } catch (Exception ignored) {
        }
    }

    public void clearPrerences() {
        frtSharePrefUtil = FRTSharePrefUtil.getInstance(context);
        frtSharePrefUtil.setString(frtConstants.USERNAME_KEY, "");
        frtSharePrefUtil.setBoolean(frtConstants.IS_LOGGED_IN, false);
        frtSharePrefUtil.setString(context.getString(R.string.tokenexpiretime_key), "");
        frtSharePrefUtil.setString(context.getString(R.string.token_key), "");
        frtSharePrefUtil.setString(context.getString(R.string.tokenexpiretime_key), "");
        frtSharePrefUtil.setString(context.getString(R.string.tokentype_key), "");
        frtSharePrefUtil.setString(context.getString(R.string.reasonname), "");
//        frtSharePrefUtil.setString("planneddata", "");
    }

    public String formatDate(String inputDate) {
        @SuppressLint("SimpleDateFormat") DateFormat inputFormat = new SimpleDateFormat("dd-MM-yyyy");
        @SuppressLint("SimpleDateFormat") DateFormat outputFormat = new SimpleDateFormat("dd-MMM-yyyy");
        String outputDateStr = null;
        try {
            Date date = inputFormat.parse(inputDate);
            outputDateStr = outputFormat.format(date);
        } catch (ParseException ignored) {
        }
        return outputDateStr;
    }

    public double calculationByDistance(FRTRequestSaveRouteLocationmodel start, FRTRequestSaveRouteLocationmodel end) {
        LatLng l1 = new LatLng(start.getLatitudeDouble(), start.getLongitudeDouble());
        LatLng l2 = new LatLng(end.getLatitudeDouble(), end.getLongitudeDouble());
        return calculationByDistance(l1, l2);
    }

    public double calculationByDistance(LatLng start, LatLng end) {
        int Radius = 6371;// radius of earth in Km
        double lat1 = start.latitude;
        double lat2 = end.latitude;
        double lon1 = start.longitude;
        double lon2 = end.longitude;
        double dLat = Math.toRadians(lat2 - lat1);
        double dLon = Math.toRadians(lon2 - lon1);
        double a = Math.sin(dLat / 2) * Math.sin(dLat / 2)
                + Math.cos(Math.toRadians(lat1))
                * Math.cos(Math.toRadians(lat2)) * Math.sin(dLon / 2)
                * Math.sin(dLon / 2);
        double c = 2 * Math.asin(Math.sqrt(a));
        double valueResult = Radius * c * 1000;
        if (Double.isNaN(valueResult)) {
            valueResult = 0.0;
        }
        return valueResult;
    }

    public void createTrackingTimeoutHandler() {
        try {
            Thread thread = new Thread() {
                public void run() {
                    Looper.prepare();
                    final Handler handler = new Handler();
                    handler.postDelayed(new Runnable() {
                        @Override
                        public void run() {
                            // Do Work
                            frtSharePrefUtil = FRTSharePrefUtil.getInstance(context);
                            Log.d("Location Time out", "yes");
                            frtSharePrefUtil.setString(context.getString(R.string.reasonname), "Timeout");
                            handler.removeCallbacks(this);
                            Looper.myLooper().quit();
                        }
                    }, 24 * 60 * 60 * 1000);
                    Looper.loop();
                }
            };
            thread.start();
        } catch (Exception ignored) {
        }
    }

    public int getBatteryPercentage(Context context) {
        IntentFilter iFilter = new IntentFilter(Intent.ACTION_BATTERY_CHANGED);
        Intent batteryStatus = context.registerReceiver(null, iFilter);
        int level = batteryStatus != null ? batteryStatus.getIntExtra(BatteryManager.EXTRA_LEVEL, -1) : -1;
        int scale = batteryStatus != null ? batteryStatus.getIntExtra(BatteryManager.EXTRA_SCALE, -1) : -1;
        float batteryPct = level / (float) scale;
        return (int) (batteryPct * 100);
    }

    public boolean isTwoDatesDifferenceLessthanThirtyOne(String startDate, String endDate) throws ParseException {
        SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-yyyy", Locale.ENGLISH);
        Date firstDate = sdf.parse(startDate);
        Date secondDate = sdf.parse(endDate);
        long diffInMillies = Math.abs(secondDate.getTime() - firstDate.getTime());
        long diff = TimeUnit.DAYS.convert(diffInMillies, TimeUnit.MILLISECONDS);
        return diff < 31;
    }

    /**
     * This function would capture the tracking data and push to server. This function would be called every x seconds
     *
     * @param frtwebapi               frtwebapi instance
     * @param frtLocationDb           db instance
     * @param frtConnectivityReceiver connectivity instance
     */
    public void sendDataToServer(FRTWEBAPI frtwebapi, FRTLocationDb frtLocationDb, FRTConnectivityReceiver frtConnectivityReceiver) {
        try {
            if (frtConnectivityReceiver.isConnected(context)) {
                // commented as work in progress
                List<FRTRequestSaveRouteLocationmodel> frtRequestSaveRouteLocationmodelList = frtLocationDb.getAllTrackings();
                if (frtRequestSaveRouteLocationmodelList.size() > 0) {
                    // check for pending data during offline
                    int size = frtRequestSaveRouteLocationmodelList.size();
                    final int CHUNKSIZE = 100;
                    for (int i = 0; i <= size / CHUNKSIZE; i++) {
                        int to = (i + 1) * CHUNKSIZE;
                        if (to > size)
                            to = size;
                        sendDataToServerOffline(frtRequestSaveRouteLocationmodelList.subList(i * CHUNKSIZE, to), frtwebapi, frtLocationDb);
                    }
                }
            }
        } catch (Exception ignored) {
            Log.e("tagsenddata", ignored.toString());
        }
    }

    private void sendDataToServerOffline(final List<FRTRequestSaveRouteLocationmodel> frtRequestSaveRouteLocationmodelList, FRTWEBAPI frtwebapi, final FRTLocationDb frtLocationDb) {
        try {
            FRTAsyncCommon<List<FRTRequestSaveRouteLocationmodel>> frtAsyncCommon = FRTAsyncCommon.getAsyncInstance();
            frtAsyncCommon.setContext(context);
            frtAsyncCommon.setFrtModelList(frtRequestSaveRouteLocationmodelList);
            final List<Integer> idList = new ArrayList<>();
            for (FRTRequestSaveRouteLocationmodel model : frtRequestSaveRouteLocationmodelList) {
                idList.add(model.getSeqId());
                Log.d("PANKAJ", "SENDING ID " + model.getSeqId());
            }
            frtAsyncCommon.execute(frtwebapi.getWEBAPI(FRTAPIType.SAVE_ROUTE_BULK), "saveroutebulk");
            frtAsyncCommon.setFetchDataCallBack(new FRTAsyncCommon.FetchDataCallBack() {
                @Override
                public void getAsyncData(String response, String type) {
                    if (response != null) {
                        Log.d("PANKAJ", "RESPONSE RECEIVED");
                        try {
                            JSONObject jsonObject = new JSONObject(response);
                            if (jsonObject.optString("status").equals("OK")) {
                                frtSharePrefUtil.setList(idList);
                                frtLocationDb.deleteTrackingById(idList);
                                Log.d("PANKAJ", "RECORDS DELETED");
                            } else if (jsonObject.optString(context.getString(R.string.status_key)).equals(context.getString(R.string.error))) {
                                Log.e("ERRORDATA", "Something went wrong with server or client parameters.");
                            } else if (jsonObject.optString(context.getString(R.string.status_key)).equals(context.getString(R.string.req_denied))) {
                                frtUtility.goToLogin(context.getString(R.string.req_denied));
                            } else if (jsonObject.optString(context.getString(R.string.status_key)).equals(context.getString(R.string.session_exp))) {
                                frtUtility.goToLogin(context.getString(R.string.session_exp));
                            }
                        } catch (Exception ignored) {
                            Log.e("service", ignored.toString());
                        }
                    }
                }
            });
        } catch (Exception ignored) {
            Log.e("service", ignored.toString());
        }
    }

    public void setIsOneTime(boolean isOneTime) {
        this.isOneTime = isOneTime;
    }

    public boolean isOneTime() {
        return isOneTime;
    }

    public String saveImageAsBase64(Bitmap bitmap) {
        Matrix matrix = new Matrix();
        if (bitmap.getWidth() > bitmap.getHeight())
            matrix.postRotate(90);
        int height =  bitmap.getHeight();
        int width =  bitmap.getWidth();
        int h = (height < 700)?height:700;
        if(height>h)
            height=h;
        int w = (h == height)?width: (width * (h / height));
        Bitmap scaledBitmap = Bitmap.createScaledBitmap(bitmap, w , h , true);

        //Bitmap scaledBitmap = Bitmap.createScaledBitmap(bitmap,bitmap.getWidth()/2 ,bitmap.getHeight()/2 , true);
        Bitmap rotatedBitmap = Bitmap.createBitmap(scaledBitmap, 0, 0, scaledBitmap.getWidth(), scaledBitmap.getHeight(), matrix, true);
        ByteArrayOutputStream bytes = new ByteArrayOutputStream();
        rotatedBitmap.compress(Bitmap.CompressFormat.PNG, 100, bytes);
        int size = bytes.size() / 1024;
        byte[] byteArray = bytes.toByteArray();
        String encodedImage = Base64.encodeToString(byteArray, Base64.DEFAULT);
        return encodedImage;
    }

    private File savebitmap(Bitmap bmp) {
        String extStorageDirectory = Environment.getExternalStorageDirectory()
                .toString();
        OutputStream outStream = null;

        File file = new File(bmp + ".png");
        if (file.exists()) {
            file.delete();
            file = new File(extStorageDirectory, bmp + ".png");
            Log.e("file exist", "" + file + ",Bitmap= " + bmp);
        }
        try {
            outStream = new FileOutputStream(file);
            bmp.compress(Bitmap.CompressFormat.PNG, 100, outStream);
            outStream.flush();
            outStream.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        Log.e("file", "" + file);
        return file;

    }

    /*public void compressBitmap(File file, int sampleSize, int quality) {
        try {
            BitmapFactory.Options options = new BitmapFactory.Options();
            options.inSampleSize = sampleSize;
            FileInputStream inputStream = new FileInputStream(file);

            Bitmap selectedBitmap = BitmapFactory.decodeStream(inputStream, null, options);
            inputStream.close();

            FileOutputStream outputStream = new FileOutputStream("location to save");
            selectedBitmap.compress(Bitmap.CompressFormat.JPEG, quality, outputStream);
            outputStream.close();
            long lengthInKb = photo.length() / 1024; //in kb
            if (lengthInKb > SIZE_LIMIT) {
                compressBitmap(file, (sampleSize*2), (quality/4));
            }

            selectedBitmap.recycle();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }*/
    private class MyWebClient extends WebViewClient {
        /**
         * override url loading for api level below 21
         *
         * @param view webview instance
         * @param url  requested url
         * @return true/false
         */
        @Override
        @SuppressWarnings("deprecation")
        public boolean shouldOverrideUrlLoading(WebView view, String url) {
            view.loadUrl(url);
            return super.shouldOverrideUrlLoading(view, url);
        }
    }

    // Fetches data from url passed
    private class FetchUrl extends AsyncTask<String, Void, String> {

        @Override
        protected String doInBackground(String... url) {
            // For storing data from web service
            String data = "";
            try {
                // Fetching the data from web service
                data = downloadUrl(url[0]);
                Log.d("Background Task data", data);
            } catch (Exception e) {
                Log.d("Background Task", e.toString());
            }
            return data;
        }

        @Override
        protected void onPostExecute(String result) {
            super.onPostExecute(result);
            ParserTask parserTask = new ParserTask();
            // Invokes the thread for parsing the JSON data
            parserTask.execute(result);

        }

    }

    /**
     * A class to parse the Google Places in JSON format
     */
    private class ParserTask extends AsyncTask<String, Integer, List<List<HashMap<String, String>>>> {
        // Parsing the data in non-ui thread
        @Override
        protected List<List<HashMap<String, String>>> doInBackground(String... jsonData) {
            JSONObject jObject;
            List<List<HashMap<String, String>>> routes = null;
            try {
                jObject = new JSONObject(jsonData[0]);
                Log.d("ParserTask0", jsonData[0].toString());
                FRTDataParser parser = new FRTDataParser();
                Log.d("ParserTask1", parser.toString());
                // Starts parsing data
                routes = parser.parse(jObject);
                Log.d("ParserTask", "Executing routes");
                Log.d("ParserTask2", routes.toString());
            } catch (Exception ignored) {
            }
            return routes;
        }

        // Executes in UI thread, after the parsing process
        @Override
        protected void onPostExecute(List<List<HashMap<String, String>>> result) {
            PolylineOptions rectOptions = new PolylineOptions();
            rectOptions.width(16);
            //this is the color of route
            rectOptions.color(routeColor);
            for (int i = 0; i < latlnglist.size(); i++) {
                if (checkList) {
                    @SuppressWarnings("unchecked") Double lati = ((List<FRTResponsePlannedRouteModel>) latlnglist).get(i).getLat();
                    @SuppressWarnings("unchecked") Double longi = ((List<FRTResponsePlannedRouteModel>) latlnglist).get(i).getLng();
                    LatLng latlng = new LatLng(lati,
                            longi);
                    rectOptions.add(latlng);
                } else {
                    @SuppressWarnings("unchecked") Double lati = ((List<FRTResponseActualRouteModel>) latlnglist).get(i).getLat();
                    @SuppressWarnings("unchecked") Double longi = ((List<FRTResponseActualRouteModel>) latlnglist).get(i).getLng();
                    LatLng latlng = new LatLng(lati,
                            longi);
                    rectOptions.add(latlng);
                }
            }
            googleMap.addPolyline(rectOptions);
//            setIsOneTime(true);
        }
    }


    public void logInfo(Context mContext, String message, FRTConstants frtConstants) {
        try {
            deleteContentOfLogFileIfAccordingToSize(mContext, frtConstants);
            if (BuildConfig.DEBUG) {
                String tabSeprator = "\t";
                String separator = "\r\n";
                message = separator + getCurrentDateTimeForLog() + tabSeprator + message;
                generateLogOnDevice(mContext, message, frtConstants);
            }
        } catch (Exception ex) {
            //logException(ex);
        }
    }

    public void deleteContentOfLogFileIfAccordingToSize(Context mContext, FRTConstants frtConstants) {
        File root = new File(mContext.getExternalFilesDir(null).getPath());
        String fileName = frtConstants.LOG_FILE_NAME;
        File file = new File(root, fileName);
        if (file.exists()) {
            if (file.length() > frtConstants.LOG_FILE_SIZE) {
                clearContentOfLogFile(mContext, frtConstants);
                String message = "Message:";
                message = message + "\t" + "Previous Log Deleted!";
                logInfo(mContext, message, frtConstants);
            }
        }
    }

    public void clearContentOfLogFile(Context mContext, FRTConstants frtConstants) {
        File root = new File(mContext.getExternalFilesDir(null).getPath());
        String fileName = frtConstants.LOG_FILE_NAME;
        File file = new File(root, fileName);
        if (file.exists()) {
            try {
                new RandomAccessFile(file, "rw").setLength(0);
            } catch (FileNotFoundException e) {

            } catch (IOException e) {
            }
        }
    }

    public void generateLogOnDevice(Context mContext, String message, FRTConstants frtConstants) {
        try {
            File root = new File(mContext.getExternalFilesDir(null).getPath());
            File file = new File(root, frtConstants.LOG_FILE_NAME);
            FileWriter writer = new FileWriter(file, true);
            writer.append(message + "\n");
            writer.flush();
            writer.close();
        } catch (IOException e) {
            // logException(e);
        }
    }

    public String getCurrentDateTimeForLog() {
        Calendar c = Calendar.getInstance();
        SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        String formattedDate = df.format(c.getTime());
        return formattedDate;
    }

    @SuppressLint("SimpleDateFormat")
    public Date getDateFromString(String dateString) {
        SimpleDateFormat format = new SimpleDateFormat("dd-MMM-yy HH:mm:ss");
        Date date = null;
        try {
            date = format.parse(dateString);
            System.out.println(date);

        } catch (ParseException e) {
            e.printStackTrace();
        }
        return date;
    }

    @TargetApi(Build.VERSION_CODES.JELLY_BEAN)
    public boolean checkPermission(final Activity context, final FRTConstants frtConstants) {
        int currentAPIVersion = Build.VERSION.SDK_INT;
        if (currentAPIVersion >= Build.VERSION_CODES.M) {
            if (ContextCompat.checkSelfPermission(context, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED
                    && ContextCompat.checkSelfPermission(context, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED) {
                if (ActivityCompat.shouldShowRequestPermissionRationale(context, Manifest.permission.READ_EXTERNAL_STORAGE)) {
                    AlertDialog.Builder alertBuilder = new AlertDialog.Builder(context);
                    alertBuilder.setCancelable(true);
                    alertBuilder.setTitle("Permission necessary");
                    alertBuilder.setMessage("External storage permission is necessary");
                    alertBuilder.setPositiveButton(android.R.string.yes, new DialogInterface.OnClickListener() {
                        @TargetApi(Build.VERSION_CODES.JELLY_BEAN)
                        public void onClick(DialogInterface dialog, int which) {
                            ActivityCompat.requestPermissions(context, new String[]{Manifest.permission.READ_EXTERNAL_STORAGE
                                    , Manifest.permission.CAMERA}, frtConstants.MY_PERMISSIONS_REQUEST_READ_EXTERNAL_STORAGE);
                        }
                    });
                    AlertDialog alert = alertBuilder.create();
                    alert.show();

                } else {
                    ActivityCompat.requestPermissions(context, new String[]{Manifest.permission.READ_EXTERNAL_STORAGE
                            , Manifest.permission.CAMERA}, frtConstants.MY_PERMISSIONS_REQUEST_READ_EXTERNAL_STORAGE);
                }
                return false;
            } else {
                return true;
            }
        } else {
            return true;
        }
    }

    public void cameraIntent(Activity context) {
        Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
        context.startActivityForResult(intent, frtConstants.REQUEST_CAMERA_ROUTEACTION);
    }


    /* public static String getFileNameFromFile(String filePath) throws Exception {

         File fl = new File(filePath);
         String ret = fl.getName();
         return ret;
     }*/
    public static String[] getFileNameFromFile(String filePath) throws Exception {
        String[] ret = new String[2];
        File fl = new File(filePath);
        ret[0] = fl.getName();
        ret[1] = String.valueOf(fl.length() / 1024);
        return ret;
    }

    /**
     * reduces the size of the image
     *
     * @param image
     * @param maxSize
     * @return
     */
    public Bitmap getResizedBitmap(Bitmap image, int maxSize) {
        int width = image.getWidth();
        int height = image.getHeight();

        float bitmapRatio = (float) width / (float) height;
        if (bitmapRatio > 1) {
            width = maxSize;
            height = (int) (width / bitmapRatio);
        } else {
            height = maxSize;
            width = (int) (height * bitmapRatio);
        }
        return Bitmap.createScaledBitmap(image, width, height, true);
    }

    public String getFileSize(File file) {
        String modifiedFileSize = null;
        double fileSize = 0.0;
        if (file.isFile()) {
            fileSize = (double) file.length();//in Bytes

            if (fileSize < 1024) {
                modifiedFileSize = String.valueOf(fileSize).concat("B");
            } else if (fileSize > 1024 && fileSize < (1024 * 1024)) {
                modifiedFileSize = String.valueOf(Math.round((fileSize / 1024 * 100.0)) / 100.0).concat("KB");
            } else {
                modifiedFileSize = String.valueOf(Math.round((fileSize / (1024 * 1204) * 100.0)) / 100.0).concat("MB");
            }
        } else {
            modifiedFileSize = "Unknown";
        }

        return modifiedFileSize;
    }

    public float getScreenWidth(Activity activity) {
        Display display = activity.getWindowManager().getDefaultDisplay();
        DisplayMetrics outMetrics = new DisplayMetrics();
        display.getMetrics(outMetrics);
        float pxWidth = outMetrics.widthPixels;
        return pxWidth;
    }

    public Bitmap BITMAP_RESIZER(Bitmap bitmap, int newWidth, int newHeight) {
        Bitmap scaledBitmap = Bitmap.createBitmap(newWidth, newHeight, Bitmap.Config.ARGB_8888);

        float ratioX = newWidth / (float) bitmap.getWidth();
        float ratioY = newHeight / (float) bitmap.getHeight();
        float middleX = newWidth / 2.0f;
        float middleY = newHeight / 2.0f;

        Matrix scaleMatrix = new Matrix();
        scaleMatrix.setScale(ratioX, ratioY, middleX, middleY);

        Canvas canvas = new Canvas(scaledBitmap);
        canvas.setMatrix(scaleMatrix);
        canvas.drawBitmap(bitmap, middleX - bitmap.getWidth() / 2, middleY - bitmap.getHeight() / 2, new Paint(Paint.FILTER_BITMAP_FLAG));

        return scaledBitmap;

    }

    public Bitmap decodeSampledBitmapFromPath(String path, int reqWidth, int reqHeight) {
        final BitmapFactory.Options options = new BitmapFactory.Options();
        options.inJustDecodeBounds = true;
        options.inMutable = true;
        options.inBitmap = BitmapFactory.decodeFile(path, options);

        options.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight);

        options.inScaled = true;
        options.inDensity = options.outWidth;
        options.inTargetDensity = reqWidth * options.inSampleSize;

        options.inJustDecodeBounds = false;
        options.inPurgeable = true;
        options.inInputShareable = true;

        return BitmapFactory.decodeFile(path, options);
    }

    /**
     * Calculate an inSampleSize for use in a {@link BitmapFactory.Options} object when decoding
     * bitmaps using the decode* methods from {@link BitmapFactory}. This implementation calculates
     * the closest inSampleSize that is a power of 2 and will result in the final decoded bitmap
     * having a width and height equal to or larger than the requested width and height
     * <p>
     * The function rounds up the sample size to a power of 2 or multiple
     * of 8 because BitmapFactory only honors sample size this way.
     * For example, BitmapFactory downsamples an image by 2 even though the
     * request is 3. So we round up the sample size to avoid OOM.
     */
    private int calculateInSampleSize(BitmapFactory.Options options, int reqWidth, int reqHeight) {
        int initialInSampleSize = computeInitialSampleSize(options, reqWidth, reqHeight);

        int roundedInSampleSize;
        if (initialInSampleSize <= 8) {
            roundedInSampleSize = 1;
            while (roundedInSampleSize < initialInSampleSize) {
                // Shift one bit to left
                roundedInSampleSize <<= 1;
            }
        } else {
            roundedInSampleSize = (initialInSampleSize + 7) / 8 * 8;
        }

        return roundedInSampleSize;
    }

    private int computeInitialSampleSize(BitmapFactory.Options options, int reqWidth, int reqHeight) {
        // Raw height and width of image
        final double height = options.outHeight;
        final double width = options.outWidth;

        final long maxNumOfPixels = reqWidth * reqHeight;
        final int minSideLength = Math.min(reqHeight, reqWidth);

        int lowerBound = (maxNumOfPixels < 0) ? 1 :
                (int) Math.ceil(Math.sqrt(width * height / maxNumOfPixels));
        int upperBound = (minSideLength < 0) ? 128 :
                (int) Math.min(Math.floor(width / minSideLength),
                        Math.floor(height / minSideLength));

        if (upperBound < lowerBound) {
            // return the larger one when there is no overlapping zone.
            return lowerBound;
        }

        if (maxNumOfPixels < 0 && minSideLength < 0) {
            return 1;
        } else if (minSideLength < 0) {
            return lowerBound;
        } else {
            return upperBound;
        }
    }

    public int getExifOrientation(String path) {
        ExifInterface exif;
        try {
            exif = new ExifInterface(path);
        } catch (IOException e) {
            return 0;
        }
        int exifOrientation = exif.getAttributeInt(ExifInterface.TAG_ORIENTATION, 0);
        switch (exifOrientation) {
            case ExifInterface.ORIENTATION_NORMAL:
                return 0;
            case ExifInterface.ORIENTATION_ROTATE_90:
                return 90;
            case ExifInterface.ORIENTATION_ROTATE_180:
                return 180;
            case ExifInterface.ORIENTATION_ROTATE_270:
                return 270;
            default:
                return 0;
        }
    }


}
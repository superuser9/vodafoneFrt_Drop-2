package com.vodafone.frt.db;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.os.Environment;
import android.text.TextUtils;
import android.util.Log;

import com.google.gson.Gson;
import com.vodafone.frt.constants.FRTConstants;

import com.vodafone.frt.models.FRTRequestSaveRouteLocationmodel;
import com.vodafone.frt.models.FRTResponsePlannedRouteModel;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.channels.FileChannel;
import java.util.ArrayList;
import java.util.List;

/**
 * Created by vishal on 17/1/18
 */
public class FRTLocationDb extends SQLiteOpenHelper {
    private Context context;
    private static int DATABASE_VERSION = 1;
    private static String DATABASE_NAME = "locationTrackingManager";
    private FRTConstants frtConstants;
    private String TABLE_LOCATION_TRACKING = "locationTracking";
    private String KEY_ID = "id";
    private String KEY_JSON = "modeldata";
    private String KEY_SYNC_STATUS = "syncstatus";
    private String KEY_END_STATE = "endstate";

    private String TABLE_TEMP_TRACKING = "tempLocationTracking";
    private String TABLE_PLANNED_DATA = "plannedData";
    private String KEY_ID_PLANNED = "id";
    private String KEY_LAT = "lat";
    private String KEY_LON = "lng";
    private String KEY_JSONLOCATION = "lng";
    private Context mContext;

    public FRTLocationDb(Context context) {
        super(context, DATABASE_NAME, null, DATABASE_VERSION);
        mContext = context;
        frtConstants = new FRTConstants();
        //3rd argument to be passed is CursorFactory instance
    }

    // Creating Tables
    @Override
    public void onCreate(SQLiteDatabase db) {
        createTrackingTable(db);
//        createPlannedDataTable(db);
    }

    private void createPlannedDataTable(SQLiteDatabase db) {
        String CREATE_PLANNED_DATA_TABLE = "CREATE TABLE " + TABLE_PLANNED_DATA + "("
                + KEY_ID_PLANNED + " INTEGER PRIMARY KEY AUTOINCREMENT, " + KEY_LAT + " DOUBLE, " + KEY_LON + " DOUBLE)";
        db.execSQL(CREATE_PLANNED_DATA_TABLE);
    }

    private void createTrackingTable(SQLiteDatabase db) {
        String CREATE_LOCATION_TRACK_TABLE = "CREATE TABLE " + TABLE_LOCATION_TRACKING + "("
                + KEY_ID + " INTEGER PRIMARY KEY AUTOINCREMENT, " + KEY_JSON + " TEXT, " + KEY_SYNC_STATUS + " TEXT, " + KEY_END_STATE + " TEXT)";
        db.execSQL(CREATE_LOCATION_TRACK_TABLE);
    }



    // Upgrading database
    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
        // Drop older table if existed
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_LOCATION_TRACKING);
//        db.execSQL("DROP TABLE IF EXISTS " + TABLE_PLANNED_DATA);
        // Create tables again
        onCreate(db);
    }

    // code to add the new contact
    public void addLocationTracking(FRTRequestSaveRouteLocationmodel frtRequestSaveRouteLocationmodel) {
        SQLiteDatabase db = getWritableDatabase();
        Gson gson = new Gson();
        String json = gson.toJson(frtRequestSaveRouteLocationmodel);
        ContentValues values = new ContentValues();
        values.put(KEY_JSON, json);
        values.put(KEY_SYNC_STATUS, frtConstants.SYNC_STATUS_PENDING);
        // Inserting Row
        db.insert(TABLE_LOCATION_TRACKING, null, values);
        db.close(); // Closing database connection
    }



    // code to add the new contact
    public void addPlannedData(FRTResponsePlannedRouteModel frtResponsePlannedRouteModel) {
        SQLiteDatabase db = getWritableDatabase();
//        Gson gson = new Gson();
//        String json = gson.toJson(frtResponsePlannedRouteModel);
        ContentValues values = new ContentValues();
        values.put(KEY_LAT, frtResponsePlannedRouteModel.getLat());
        values.put(KEY_LON, frtResponsePlannedRouteModel.getLng());
//        values.put(KEY_JSONLOCATION, json);
        // Inserting Row
        db.insert(TABLE_PLANNED_DATA, null, values);
        db.close(); // Closing database connection
    }

    //exporting database
    public void exportDB(Context context) {
        File sd = Environment.getExternalStorageDirectory();
        File data = Environment.getDataDirectory();
        FileChannel source;
        FileChannel destination;
        String currentDBPath = "/data/" + "com.vodafone.frt" + "/databases/" + DATABASE_NAME;
        String backupDBPath = DATABASE_NAME;
        File currentDB = new File(data, currentDBPath);
        File backupDB = new File(sd, backupDBPath);
        try {
            source = new FileInputStream(currentDB).getChannel();
            destination = new FileOutputStream(backupDB).getChannel();
            destination.transferFrom(source, 0, source.size());
            source.close();
            destination.close();
            Log.d("DB_EXPORT ", "DB Exported");
        } catch (IOException e) {
        }
    }

    public void recreateLocationTracking() {
        SQLiteDatabase db = getWritableDatabase();
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_LOCATION_TRACKING);
//        db.execSQL("DROP TABLE IF EXISTS " + TABLE_PLANNED_DATA);
        onCreate(db);
    }


   // public List<FRTRequestSaveRouteLocationmodel>


    // Getting All Trackings
    public List<FRTRequestSaveRouteLocationmodel> getAllTrackings() {
        List<FRTRequestSaveRouteLocationmodel> frtRequestSaveRouteLocationmodelList = new ArrayList<>();
        try {
            // Select All Query
            String selectQuery = "select  * from " + TABLE_LOCATION_TRACKING + " order by " + KEY_ID;
            SQLiteDatabase db = getWritableDatabase();
            Cursor cursor = db.rawQuery(selectQuery, null);
            // looping through all rows and adding to list
            if (cursor.moveToFirst()) {
                do {
                    FRTRequestSaveRouteLocationmodel frtRequestSaveRouteLocationmodel = new FRTRequestSaveRouteLocationmodel();
                    frtRequestSaveRouteLocationmodel.setSeqId(cursor.getInt(0));
                    frtRequestSaveRouteLocationmodel.setJsontoupload(cursor.getString(1));
                    frtRequestSaveRouteLocationmodelList.add(frtRequestSaveRouteLocationmodel);
                } while (cursor.moveToNext());
            }
        } catch (Exception ignored) {
            Log.e(getClass().getName(), ignored.toString());
        }
        // return contact list
        return frtRequestSaveRouteLocationmodelList;
    }







    // Getting All Planned Data
    public List<FRTResponsePlannedRouteModel> getAllPlannedData() {
        List<FRTResponsePlannedRouteModel> frtRequestSaveRouteLocationmodelList = new ArrayList<>();
        // Select All Query
        String selectQuery = "select  * from " + TABLE_PLANNED_DATA;
        SQLiteDatabase db = getWritableDatabase();
        Cursor cursor = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list
        if (cursor.moveToFirst()) {
            do {
                FRTResponsePlannedRouteModel frtRequestSaveRouteLocationmodel = new FRTResponsePlannedRouteModel();
                frtRequestSaveRouteLocationmodel.setLat(cursor.getDouble(1));
                frtRequestSaveRouteLocationmodel.setLng(cursor.getDouble(2));
                frtRequestSaveRouteLocationmodelList.add(frtRequestSaveRouteLocationmodel);
            } while (cursor.moveToNext());
        }
        // return contact list
        return frtRequestSaveRouteLocationmodelList;
    }

    public void deleteTrackingById(List<Integer> ids) {
        SQLiteDatabase db = getWritableDatabase();
        String args = TextUtils.join(", ", ids);
        db.delete(TABLE_LOCATION_TRACKING, KEY_ID + " IN (?)", new String[]{args});
//        for (int id : ids) {
//            db.delete(TABLE_LOCATION_TRACKING, KEY_ID + " = " + id, null);
//        }
        Log.d("PANKAJ", "DELETED SEQ ID " + args);
    }

    public void removePlannedData() {
        SQLiteDatabase db = getWritableDatabase();
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_PLANNED_DATA);
        createPlannedDataTable(db);
    }


    public List<FRTRequestSaveRouteLocationmodel> getTrackings() {
        List<FRTRequestSaveRouteLocationmodel> frtRequestSaveRouteLocationmodelList = new ArrayList<>();
        try {
            Gson gsonObj = new Gson();

            // Select All Query
            String selectQuery = "select  * from " + TABLE_LOCATION_TRACKING + " WHERE " + KEY_SYNC_STATUS + " = '" + frtConstants.SYNC_STATUS_PENDING + " or "
                    + frtConstants.SYNC_STATUS_IN_PROGRESS + "' order by " + KEY_ID + " LIMIT 100 ";
            SQLiteDatabase db = getWritableDatabase();
            Cursor cursor = db.rawQuery(selectQuery, null);
            // looping through all rows and adding to list
            if (cursor.moveToFirst()) {
                do {
                    FRTRequestSaveRouteLocationmodel frtRequestSaveRouteLocationmodel = new FRTRequestSaveRouteLocationmodel();
                    frtRequestSaveRouteLocationmodel.setSeqId(cursor.getInt(0));
                    frtRequestSaveRouteLocationmodel.setJsontoupload(cursor.getString(1));
                    frtRequestSaveRouteLocationmodelList.add(frtRequestSaveRouteLocationmodel);

                } while (cursor.moveToNext());
            }
        } catch (Exception ignored) {
            Log.e(getClass().getName(), ignored.toString());
        }
        // return contact list
        return frtRequestSaveRouteLocationmodelList;
    }






    /*public FRTRequestSaveRouteLocationmodel UpdateLocation(int flag,String speed,String password)
    {
        SQLiteDatabase database = this.getWritableDatabase();
        ContentValues cv = new ContentValues();

        cv.put("Status",flag);//I am  updating flag here

        //database.update(TABLE_LOCATION_TRACKING, cv, ""+KEY_UserName+"= '"+ username+"' AND "+KEY_CID+"='"+Cid+"'  AND "+KEY_Password+"='"+password+"'" , null);
        database.close();

    }*/



    public FRTRequestSaveRouteLocationmodel getLastLocationBySeqNumber() {
        int lastSequenceNumber = 1;
        SQLiteDatabase db = getWritableDatabase();

        FRTRequestSaveRouteLocationmodel lastRecordBySequenceNumber = null;

        // Getting sequence number of last result by number
        String selectLastRecordQuery = "select * from " + TABLE_LOCATION_TRACKING + " order by " + KEY_ID + " DESC LIMIT 1 ";
        Cursor selectLastRecordCursor = null;
        try {
            selectLastRecordCursor = db.rawQuery(selectLastRecordQuery, null);

            if (selectLastRecordCursor.getCount() > 0) {
                selectLastRecordCursor.moveToFirst();
                int seqNumber = selectLastRecordCursor.getInt(0);

                if (seqNumber <= frtConstants.LAST_LOCATION_SEQUENCE_NUMBER) {
                    lastSequenceNumber = seqNumber;
                } else {
                    lastSequenceNumber = seqNumber - frtConstants.LAST_LOCATION_SEQUENCE_NUMBER;
                }
            }

        } finally {
            selectLastRecordCursor.close();
        }

        // Getting data from sequence number
        String selectQuery = "select  * from " + TABLE_LOCATION_TRACKING + " where " + KEY_ID + " = " + lastSequenceNumber;
        Cursor selectCursor = null;
        try {
            selectCursor = db.rawQuery(selectQuery, null);

            if (selectCursor.getCount() > 0) {
                selectCursor.moveToFirst();
                lastRecordBySequenceNumber = new Gson().fromJson(selectCursor.getString(1), FRTRequestSaveRouteLocationmodel.class);
            }
            return lastRecordBySequenceNumber;
        } finally {
            selectCursor.close();
        }
    }


    public void updateSyncCompletedTrackingById(List<Integer> ids, String status, boolean flag) {
        SQLiteDatabase db = getWritableDatabase();

        ContentValues data = new ContentValues();
        if (flag)
            data.put(KEY_SYNC_STATUS, status);
        else
            data.put(KEY_END_STATE, status);

        //db.delete(TABLE_LOCATION_TRACKING, KEY_ID + " IN (?)", new String[]{args});
        for (int i = 0; i < ids.size(); i++) {
            db.update(TABLE_LOCATION_TRACKING, data, KEY_ID + "=" + ids.get(i), null);
        }
    }

    public int getpendingandingressDataSize() {
        SQLiteDatabase db = getWritableDatabase();
        String selectQuery = "Select * from " + TABLE_LOCATION_TRACKING + " where syncstatus = '" + frtConstants.SYNC_STATUS_PENDING + "' or syncstatus = '" + frtConstants.SYNC_STATUS_IN_PROGRESS + "'";
        Cursor selectCursor = null;
        try {
            selectCursor = db.rawQuery(selectQuery, null);

            return selectCursor.getCount();
        } finally {
            selectCursor.close();
        }
    }
}